import { Encoded, Encoding } from './encoder.js';
/**
 * Check if address is valid
 * @param maybeAddress - Address to check
 */
export declare function isAddressValid(maybeAddress: string): maybeAddress is Encoded.AccountAddress;
/**
 * Check if data is encoded in one of provided encodings
 * @param maybeEncoded - Data to check
 * @param encodings - Rest parameters with encodings to check against
 */
export declare function isAddressValid<E extends Encoding>(maybeEncoded: string, ...encodings: E[]): maybeEncoded is Encoded.Generic<E>;
/**
 * Generate a random salt (positive integer)
 * @returns random salt
 */
export declare function genSalt(): number;
/**
 * Converts a positive integer to the smallest possible
 * representation in a binary digit representation
 * @param value - Value to encode
 * @returns Encoded number
 */
export declare function encodeUnsigned(value: number): Buffer;
/**
 * Calculate 256bits Blake2b hash of `input`
 * @param input - Data to hash
 * @returns Hash
 */
export declare function hash(input: string | Uint8Array): Buffer;
/**
 * Compute contract address
 * @category contract
 * @param owner - Address of contract owner
 * @param nonce - Round when contract was created
 * @returns Contract address
 */
export declare function encodeContractAddress(owner: Encoded.AccountAddress, nonce: number): Encoded.ContractAddress;
/**
 * Verify that signature was signed by public key
 * @param data - Data that was signed
 * @param signature - Signature of data
 * @param address - Address to verify against
 * @returns is data was signed by address
 */
export declare function verify(data: Uint8Array, signature: Uint8Array, address: Encoded.AccountAddress): boolean;
export declare const messagePrefixLength: Uint8Array;
export declare function messageToHash(message: string): Buffer;
/**
 * Verify that message was signed by address
 * @param message - Message that was signed
 * @param signature - Signature of message
 * @param address - Address to verify against
 * @returns is data was signed by address
 */
export declare function verifyMessage(message: string, signature: Uint8Array, address: Encoded.AccountAddress): boolean;
