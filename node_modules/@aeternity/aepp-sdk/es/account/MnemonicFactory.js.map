{"version":3,"file":"MnemonicFactory.js","names":["mnemonicToSeed","tweetnaclAuth","AccountBaseFactory","AccountMemory","encode","Encoding","decode","concatBuffers","InternalError","ED25519_CURVE","_Buffer","from","HARDENED_OFFSET","deriveKey","message","key","I","full","IL","slice","IR","secretKey","chainCode","derivePathFromKey","segments","reduce","segment","indexBuffer","allocUnsafe","writeUInt32BE","data","alloc","_mnemonic","WeakMap","_wallet","_AccountMnemonicFactory_brand","WeakSet","AccountMnemonicFactory","constructor","mnemonicOrWallet","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","getWallet","_classPrivateFieldGet","seed","masterKey","walletKey","Bytearray","initialize","accountIndex","_assertClassBrand","_getAccountSecretKey","call","wallet","raw","AccountSecretKey"],"sources":["../../src/account/MnemonicFactory.ts"],"sourcesContent":["import { mnemonicToSeed } from '@scure/bip39';\nimport tweetnaclAuth from 'tweetnacl-auth';\nimport AccountBaseFactory from './BaseFactory.js';\nimport AccountMemory from './Memory.js';\nimport { encode, Encoding, Encoded, decode } from '../utils/encoder.js';\nimport { concatBuffers } from '../utils/other.js';\nimport { InternalError } from '../utils/errors.js';\n\nexport const ED25519_CURVE = Buffer.from('ed25519 seed');\nconst HARDENED_OFFSET = 0x80000000;\n\ninterface KeyTreeNode {\n  secretKey: Uint8Array;\n  chainCode: Uint8Array;\n}\n\nexport function deriveKey(message: Uint8Array, key: Uint8Array): KeyTreeNode {\n  const I = tweetnaclAuth.full(message, key);\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    secretKey: IL,\n    chainCode: IR,\n  };\n}\n\nexport function derivePathFromKey(key: KeyTreeNode, segments: readonly number[]): KeyTreeNode {\n  return segments.reduce(({ secretKey, chainCode }, segment) => {\n    const indexBuffer = Buffer.allocUnsafe(4);\n    indexBuffer.writeUInt32BE(segment + HARDENED_OFFSET, 0);\n    const data = concatBuffers([Buffer.alloc(1, 0), secretKey, indexBuffer]);\n    return deriveKey(data, chainCode);\n  }, key);\n}\n\ninterface Wallet {\n  secretKey: Encoded.Bytearray;\n  chainCode: Encoded.Bytearray;\n}\n\n/**\n * A factory class that generates instances of AccountMemory based on provided mnemonic phrase.\n */\nexport default class AccountMnemonicFactory extends AccountBaseFactory {\n  readonly #mnemonic: string | undefined;\n\n  #wallet: Wallet | undefined;\n\n  /**\n   * @param mnemonicOrWallet - BIP39-compatible mnemonic phrase or a wallet derived from mnemonic\n   */\n  constructor(mnemonicOrWallet: string | Wallet) {\n    super();\n    if (typeof mnemonicOrWallet === 'string') this.#mnemonic = mnemonicOrWallet;\n    else this.#wallet = mnemonicOrWallet;\n  }\n\n  /**\n   * Get a wallet to initialize AccountMnemonicFactory instead mnemonic phrase.\n   * In comparison with mnemonic, the wallet can be used to derive aeternity accounts only.\n   */\n  async getWallet(): Promise<Wallet> {\n    if (this.#wallet != null) return this.#wallet;\n    if (this.#mnemonic == null)\n      throw new InternalError(\n        'AccountMnemonicFactory should be initialized with mnemonic or wallet',\n      );\n    const seed = await mnemonicToSeed(this.#mnemonic);\n    const masterKey = deriveKey(seed, ED25519_CURVE);\n    const walletKey = derivePathFromKey(masterKey, [44, 457]);\n    this.#wallet = {\n      secretKey: encode(walletKey.secretKey, Encoding.Bytearray),\n      chainCode: encode(walletKey.chainCode, Encoding.Bytearray),\n    };\n    return this.#wallet;\n  }\n\n  async #getAccountSecretKey(accountIndex: number): Promise<Encoded.AccountSecretKey> {\n    const wallet = await this.getWallet();\n    const walletKey = {\n      secretKey: decode(wallet.secretKey),\n      chainCode: decode(wallet.chainCode),\n    };\n    const raw = derivePathFromKey(walletKey, [accountIndex, 0, 0]).secretKey;\n    return encode(raw, Encoding.AccountSecretKey);\n  }\n\n  /**\n   * Get an instance of AccountMemory for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountMemory> {\n    return new AccountMemory(await this.#getAccountSecretKey(accountIndex));\n  }\n}\n"],"mappings":"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","ignoreList":[]}