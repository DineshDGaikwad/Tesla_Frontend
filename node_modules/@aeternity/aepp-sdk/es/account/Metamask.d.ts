import type { BaseProvider } from '@metamask/providers';
import AccountBase from './Base.js';
import { Encoded } from '../utils/encoder.js';
export declare const snapId = "npm:@aeternity-snap/plugin";
export declare function invokeSnap<R>(provider: BaseProvider, method: string, params: unknown, key: string): Promise<R>;
/**
 * Account connected to Aeternity Snap for MetaMask
 * https://www.npmjs.com/package/\@aeternity-snap/plugin
 */
export default class AccountMetamask extends AccountBase {
    readonly provider: BaseProvider;
    readonly index: number;
    readonly address: Encoded.AccountAddress;
    /**
     * @param address - Address of account
     */
    constructor(provider: BaseProvider, index: number, address: Encoded.AccountAddress);
    sign(): Promise<Uint8Array>;
    signTypedData(): Promise<Encoded.Signature>;
    signDelegation(): Promise<Encoded.Signature>;
    signTransaction(tx: Encoded.Transaction, { innerTx, networkId }?: {
        innerTx?: boolean;
        networkId?: string;
    }): Promise<Encoded.Transaction>;
    signMessage(message: string): Promise<Uint8Array>;
}
