{"version":3,"file":"MetamaskFactory.js","names":["InternalError","UnsupportedPlatformError","UnsupportedVersionError","semverSatisfies","AccountBaseFactory","AccountMetamask","invokeSnap","snapId","snapMinVersion","snapMaxVersion","_AccountMetamaskFactory_brand","WeakSet","_ensureReadyPromise","WeakMap","AccountMetamaskFactory","constructor","provider","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","window","ethereum","installSnap","_assertClassBrand","_ensureMetamaskSupported","call","details","request","method","params","version","_classPrivateFieldSet","Promise","resolve","ensureReady","snapVersion","getSnapVersion","args","snaps","initialize","accountIndex","_ensureReady","address","derivationPath","metamaskPrefix","startsWith","slice","length","_classPrivateFieldGet2","_classPrivateFieldGet"],"sources":["../../src/account/MetamaskFactory.ts"],"sourcesContent":["import type { BaseProvider } from '@metamask/providers';\nimport {\n  InternalError,\n  UnsupportedPlatformError,\n  UnsupportedVersionError,\n} from '../utils/errors.js';\nimport { Encoded } from '../utils/encoder.js';\nimport semverSatisfies from '../utils/semver-satisfies.js';\nimport AccountBaseFactory from './BaseFactory.js';\nimport AccountMetamask, { invokeSnap, snapId } from './Metamask.js';\n\nconst snapMinVersion = '0.0.9';\nconst snapMaxVersion = '0.1.0';\n\ninterface SnapDetails {\n  blocked: boolean;\n  enabled: boolean;\n  id: typeof snapId;\n  version: string;\n  initialPermissions: Record<string, unknown>;\n}\n\n/**\n * A factory class that generates instances of AccountMetamask.\n */\nexport default class AccountMetamaskFactory extends AccountBaseFactory {\n  readonly provider: BaseProvider;\n\n  /**\n   * @param provider - Connection to MetaMask to use\n   */\n  constructor(provider?: BaseProvider) {\n    super();\n    if (provider != null) {\n      this.provider = provider;\n      return;\n    }\n    if (window == null) {\n      throw new UnsupportedPlatformError(\n        'Window object not found, you can run AccountMetamaskFactory only in browser or setup a provider',\n      );\n    }\n    if (!('ethereum' in window) || window.ethereum == null) {\n      throw new UnsupportedPlatformError(\n        '`ethereum` object not found, you can run AccountMetamaskFactory only with Metamask enabled or setup a provider',\n      );\n    }\n    this.provider = window.ethereum as BaseProvider;\n  }\n\n  /**\n   * It throws an exception if MetaMask has an incompatible version.\n   */\n  async #ensureMetamaskSupported(): Promise<void> {\n    const version = await this.provider.request<string>({ method: 'web3_clientVersion' });\n    if (version == null) throw new InternalError(\"Can't get Ethereum Provider version\");\n    const metamaskPrefix = 'MetaMask/v';\n    if (!version.startsWith(metamaskPrefix)) {\n      throw new UnsupportedPlatformError(`Expected Metamask, got ${version} instead`);\n    }\n    const args = [version.slice(metamaskPrefix.length), '12.2.4'] as const;\n    if (!semverSatisfies(...args)) throw new UnsupportedVersionError('Metamask', ...args);\n  }\n\n  #ensureReadyPromise?: Promise<void>;\n\n  /**\n   * Request MetaMask to install Aeternity snap.\n   */\n  async installSnap(): Promise<SnapDetails> {\n    await this.#ensureMetamaskSupported();\n    const details = (await this.provider.request({\n      method: 'wallet_requestSnaps',\n      params: { [snapId]: { version: snapMinVersion } },\n    })) as { [key in typeof snapId]: SnapDetails };\n    this.#ensureReadyPromise = Promise.resolve();\n    return details[snapId];\n  }\n\n  /**\n   * It throws an exception if MetaMask or Aeternity snap has an incompatible version or is not\n   * installed.\n   */\n  async ensureReady(): Promise<void> {\n    const snapVersion = await this.getSnapVersion();\n    const args = [snapVersion, snapMinVersion, snapMaxVersion] as const;\n    if (!semverSatisfies(...args))\n      throw new UnsupportedVersionError('Aeternity snap in MetaMask', ...args);\n    this.#ensureReadyPromise = Promise.resolve();\n  }\n\n  async #ensureReady(): Promise<void> {\n    this.#ensureReadyPromise ??= this.ensureReady();\n    return this.#ensureReadyPromise;\n  }\n\n  /**\n   * @returns the version of snap installed in MetaMask\n   */\n  async getSnapVersion(): Promise<string> {\n    await this.#ensureMetamaskSupported();\n    const snaps = (await this.provider.request({ method: 'wallet_getSnaps' })) as Record<\n      string,\n      { version: string }\n    >;\n    const version = snaps[snapId]?.version;\n    if (version == null)\n      throw new UnsupportedPlatformError('Aeternity snap is not installed to MetaMask');\n    return version;\n  }\n\n  /**\n   * Get an instance of AccountMetaMask for a given account index.\n   * @param accountIndex - Index of account\n   */\n  async initialize(accountIndex: number): Promise<AccountMetamask> {\n    await this.#ensureReady();\n    const address = await invokeSnap<Encoded.AccountAddress>(\n      this.provider,\n      'getPublicKey',\n      { derivationPath: [`${accountIndex}'`, \"0'\", \"0'\"] },\n      'publicKey',\n    );\n    return new AccountMetamask(this.provider, accountIndex, address);\n  }\n}\n"],"mappings":"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","ignoreList":[]}