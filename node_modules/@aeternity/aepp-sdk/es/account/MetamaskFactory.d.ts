import type { BaseProvider } from '@metamask/providers';
import AccountBaseFactory from './BaseFactory.js';
import AccountMetamask, { snapId } from './Metamask.js';
interface SnapDetails {
    blocked: boolean;
    enabled: boolean;
    id: typeof snapId;
    version: string;
    initialPermissions: Record<string, unknown>;
}
/**
 * A factory class that generates instances of AccountMetamask.
 */
export default class AccountMetamaskFactory extends AccountBaseFactory {
    #private;
    readonly provider: BaseProvider;
    /**
     * @param provider - Connection to MetaMask to use
     */
    constructor(provider?: BaseProvider);
    /**
     * Request MetaMask to install Aeternity snap.
     */
    installSnap(): Promise<SnapDetails>;
    /**
     * It throws an exception if MetaMask or Aeternity snap has an incompatible version or is not
     * installed.
     */
    ensureReady(): Promise<void>;
    /**
     * @returns the version of snap installed in MetaMask
     */
    getSnapVersion(): Promise<string>;
    /**
     * Get an instance of AccountMetaMask for a given account index.
     * @param accountIndex - Index of account
     */
    initialize(accountIndex: number): Promise<AccountMetamask>;
}
export {};
