{"version":3,"file":"aens.js","names":["genSalt","isAddressValid","commitmentHash","isAuctionName","Tag","Encoding","LogicError","getName","sendTransaction","buildTxAsync","_salt","WeakMap","Name","constructor","value","options","_classPrivateFieldInitSpec","revoke","opt","tx","_isInternalBuild","tag","NameRevokeTx","nameId","accountId","onAccount","address","update","pointers","extendPointers","allPointers","Object","fromEntries","map","key","id","hasRawPointers","values","some","v","Bytearray","NameUpdateTx","version","entries","transfer","NameTransferTx","recipientId","getState","_this$options$onNode","onNode","nameEntry","getNameEntryByName","owner","extendTtl","nameTtl","claim","NameClaimTx","nameSalt","_classPrivateFieldGet","name","preclaim","salt","NamePreclaimTx","commitmentId","result","_classPrivateFieldSet","bid","nameFee"],"sources":["../src/aens.ts"],"sourcesContent":["/**\n * Aens methods - routines to interact with the Ã¦ternity naming system\n *\n * The high-level description of the naming system is\n * https://github.com/aeternity/protocol/blob/master/AENS.md in the protocol\n * repository.\n */\n\nimport { BigNumber } from 'bignumber.js';\nimport { genSalt, isAddressValid } from './utils/crypto.js';\nimport { commitmentHash, isAuctionName } from './tx/builder/helpers.js';\nimport { Tag, AensName } from './tx/builder/constants.js';\nimport { Encoded, Encoding } from './utils/encoder.js';\nimport { LogicError } from './utils/errors.js';\nimport { getName } from './chain.js';\nimport { sendTransaction, SendTransactionOptions } from './send-transaction.js';\nimport { Optional } from './utils/other.js';\nimport { buildTxAsync, BuildTxOptions } from './tx/builder/index.js';\nimport Node from './Node.js';\nimport AccountBase from './account/Base.js';\nimport { AddressEncodings } from './tx/builder/field-types/address.js';\n\ninterface NameRevokeOptions\n  extends BuildTxOptions<Tag.NameRevokeTx, 'nameId' | 'accountId'>,\n    Optional<SendTransactionOptions, 'onAccount' | 'onNode'> {}\n\ninterface KeyPointers {\n  [key: string]: Encoded.Generic<AddressEncodings | Encoding.Bytearray>;\n}\n\ninterface NameUpdateOptions\n  extends BuildTxOptions<Tag.NameUpdateTx, 'nameId' | 'accountId' | 'pointers'>,\n    Optional<SendTransactionOptions, 'onAccount' | 'onNode'> {\n  /**\n   * Get the pointers from the node and merge with provided ones. Pointers with the same key will be\n   * overwritten.\n   */\n  extendPointers?: boolean;\n}\n\ninterface NameTransferOptions\n  extends BuildTxOptions<Tag.NameTransferTx, 'nameId' | 'accountId' | 'recipientId'>,\n    Optional<SendTransactionOptions, 'onAccount' | 'onNode'> {}\n\ninterface NamePreclaimOptions\n  extends BuildTxOptions<Tag.NamePreclaimTx, 'accountId' | 'commitmentId'>,\n    Optional<SendTransactionOptions, 'onAccount' | 'onNode'> {}\n\ninterface NameClaimOptions\n  extends BuildTxOptions<Tag.NameClaimTx, 'accountId' | 'nameSalt' | 'name'>,\n    Optional<SendTransactionOptions, 'onAccount' | 'onNode'> {}\n\n/**\n * @category AENS\n * @example\n * ```js\n * const name = new Name('test.chain', aeSdk.getContext())\n * ```\n */\nexport default class Name {\n  #salt?: number;\n\n  /**\n   * @param value - AENS name\n   * @param options - Options\n   * @param options.onNode - Node to use\n   * @param options.onAccount - Account to use\n   */\n  constructor(\n    public readonly value: AensName,\n    public options: { onNode: Node; onAccount: AccountBase } & Omit<\n      NameRevokeOptions &\n        NameUpdateOptions &\n        NameTransferOptions &\n        NamePreclaimOptions &\n        NameClaimOptions,\n      'version'\n    >,\n  ) {\n    this.options = options;\n  }\n\n  /**\n   * Revoke a name\n   * @param options - Options\n   * @returns mined transaction details\n   * @example\n   * ```js\n   * await name.revoke({ fee, ttl, nonce })\n   * ```\n   */\n  async revoke(options: NameRevokeOptions = {}): ReturnType<typeof sendTransaction> {\n    const opt = { ...this.options, ...options };\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.NameRevokeTx,\n      nameId: this.value,\n      accountId: opt.onAccount.address,\n    });\n    return sendTransaction(tx, opt);\n  }\n\n  /**\n   * Update a name\n   * @param pointers - Map of pointer keys to corresponding addresses\n   * @param options - Options\n   * @example\n   * ```js\n   * const name = 'test.chain'\n   * const channel = 'ch_2519mBs...'\n   * const pointers = {\n   *   account_pubkey: 'ak_asd23dasdas...,',\n   *   contract_pubkey: 'ct_asdf34fasdasd...',\n   *   [getDefaultPointerKey(channel)]: channel,\n   * }\n   * await name.update(pointers, { nameTtl, ttl, fee, nonce, clientTtl })\n   * ```\n   */\n  async update(\n    pointers: KeyPointers,\n    options: NameUpdateOptions = {},\n  ): ReturnType<typeof sendTransaction> {\n    const { extendPointers, ...opt } = { ...this.options, ...options };\n    const allPointers = {\n      ...(extendPointers === true &&\n        Object.fromEntries(\n          (await getName(this.value, opt)).pointers.map(({ key, id }) => [key, id]),\n        )),\n      ...pointers,\n    };\n\n    const hasRawPointers = Object.values(allPointers).some((v) =>\n      isAddressValid(v, Encoding.Bytearray),\n    );\n\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.NameUpdateTx,\n      version: hasRawPointers ? 2 : 1,\n      nameId: this.value,\n      accountId: opt.onAccount.address,\n      pointers: Object.entries(allPointers).map(\n        ([key, id]: [string, Encoded.Generic<AddressEncodings>]) => ({ key, id }),\n      ),\n    });\n    return sendTransaction(tx, opt);\n  }\n\n  /**\n   * Transfer a name to another account\n   * @param address - Recipient account public key\n   * @param options - Options\n   * @returns mined transaction details\n   * @example\n   * ```js\n   * await name.transfer('ak_asd23dasdas...', { ttl, fee, nonce })\n   * ```\n   */\n  async transfer(\n    address: Encoded.AccountAddress,\n    options: NameTransferOptions = {},\n  ): ReturnType<typeof sendTransaction> {\n    const opt = { ...this.options, ...options };\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.NameTransferTx,\n      nameId: this.value,\n      accountId: opt.onAccount.address,\n      recipientId: address,\n    });\n    return sendTransaction(tx, opt);\n  }\n\n  /**\n   * Query the AENS name info from the node\n   * and return the object with info and predefined functions for manipulating name\n   * @param options - Options\n   * @example\n   * ```js\n   * const nameEntry = await name.getState()\n   * console.log(nameEntry.owner)\n   * ```\n   */\n  async getState(options: { onNode?: Node } = {}): Promise<\n    Awaited<ReturnType<Node['getNameEntryByName']>> & {\n      id: Encoded.Name;\n      owner: Encoded.AccountAddress;\n    }\n  > {\n    const onNode = this.options.onNode ?? options.onNode;\n    const nameEntry = await onNode.getNameEntryByName(this.value);\n    return {\n      ...nameEntry,\n      id: nameEntry.id as Encoded.Name,\n      owner: nameEntry.owner as Encoded.AccountAddress,\n    };\n  }\n\n  /**\n   *\n   * @param nameTtl - represents in number of blocks (max and default is 180000)\n   * @param options - Options\n   * @returns mined transaction details\n   */\n  async extendTtl(\n    nameTtl?: number,\n    options: Omit<Parameters<Name['update']>[1], 'extendPointers' | 'nameTtl'> = {},\n  ): ReturnType<Name['update']> {\n    return this.update({}, { ...options, nameTtl, extendPointers: true });\n  }\n\n  /**\n   * Claim a previously preclaimed registration. This can only be done after the preclaim step\n   * @param options - options\n   * @returns mined transaction details\n   * @example\n   * ```js\n   * await name.claim({ ttl, fee, nonce, nameFee })\n   * ```\n   */\n  async claim(options: NameClaimOptions = {}): ReturnType<typeof sendTransaction> {\n    const opt = { ...this.options, ...options };\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.NameClaimTx,\n      accountId: opt.onAccount.address,\n      nameSalt: this.#salt,\n      name: this.value,\n    });\n    return sendTransaction(tx, opt);\n  }\n\n  /**\n   * Preclaim a name. Sends a hash of the name and a random salt to the node\n   * @param options - Options\n   * @example\n   * ```js\n   * await name.preclaim({ ttl, fee, nonce })\n   * ```\n   */\n  async preclaim(options: NamePreclaimOptions = {}): ReturnType<typeof sendTransaction> {\n    const opt = { ...this.options, ...options };\n    const salt = genSalt();\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.NamePreclaimTx,\n      accountId: opt.onAccount.address,\n      commitmentId: commitmentHash(this.value, salt),\n    });\n    const result = await sendTransaction(tx, opt);\n    this.#salt = salt;\n    return result;\n  }\n\n  /**\n   * Bid to name auction\n   * @param nameFee - Name fee (bid fee)\n   * @param options - Options\n   * @returns mined transaction details\n   * @example\n   * ```js\n   * const bidFee = computeBidFee(name.value, { startFee, increment: 0.42 })\n   * await name.bid(213109412839123, { ttl, fee, nonce })\n   * ```\n   */\n  async bid(\n    nameFee: number | string | BigNumber,\n    options: Omit<NameClaimOptions, 'nameFee'> = {},\n  ): ReturnType<typeof sendTransaction> {\n    if (!isAuctionName(this.value)) {\n      throw new LogicError('This is not auction name, so cant make a bid!');\n    }\n    const opt = { ...this.options, ...options };\n    const tx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.NameClaimTx,\n      accountId: opt.onAccount.address,\n      nameSalt: 0,\n      name: this.value,\n      nameFee,\n    });\n    return sendTransaction(tx, opt);\n  }\n}\n"],"mappings":"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","ignoreList":[]}