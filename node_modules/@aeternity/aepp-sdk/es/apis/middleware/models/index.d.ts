import { MiddlewarePage } from "../../../utils/MiddlewarePage.js";
import * as coreClient from "@azure/core-client";
/** Response Schema for owners of AEX-141 tokens */
export interface Aex141TokenResponse {
    /** NFT contract id */
    contractId: `ct_${string}`;
    /** Account address */
    ownerId?: `ak_${string}`;
    /** Non-fungible token id */
    tokenId: number;
}
/** Error response from the API */
export interface ErrorResponse {
    /** The message of the error raised */
    error: string;
}
/** Response Schema for AEX9 balance responses */
export interface Aex9BalanceResponse {
    /** Amount of AEX9 token */
    amount: bigint;
    /** Block hash, indicating a state of a balance for that block */
    blockHash: number;
    /** Contract id of AEX9 token */
    contractId: `ct_${string}`;
    /** Number of decimals of AEX9 token */
    decimals: number;
    /** Block height, indicating a state of a balance for that block height */
    height: number;
    /** Name of AEX9 token */
    tokenName: string;
    /** Symbol of AEX9 token */
    tokenSymbol: string;
    /** Transaction hash, indicating a state of a balance for that block height */
    txHash: `th_${string}`;
    /** Transaction index, indicating a state of a balance for that block height */
    txIndex: number;
    /** Transaction type, indicating a state of a balance for that block height */
    txType: string;
}
/** DEX swap */
export interface DexSwap {
    action: DexSwapAction;
    amounts: DexSwapAmounts;
    /** Account address */
    caller: `ak_${string}`;
    fromAmount: bigint;
    /** Contract address */
    fromContract: `ct_${string}`;
    fromDecimals: number;
    fromToken: string;
    height: number;
    logIdx: number;
    microTime: Date;
    /** Account address */
    toAccount: `ak_${string}`;
    toAmount: bigint;
    /** Contract address */
    toContract: `ct_${string}`;
    toDecimals: number;
    toToken: string;
    /** Transaction hash */
    txHash: `th_${string}`;
}
export interface DexSwapAmounts {
    amount0In: bigint;
    amount0Out: bigint;
    amount1In: bigint;
    amount1Out: bigint;
}
/** Activity related to an account */
export interface Activity {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    /** The time in which the block happened */
    blockTime: Date;
    /** The block height */
    height: number;
    /** A mix of all activity types. */
    payload: ActivityPayload;
    /** The event type */
    type: ActivityType;
}
/** A mix of all activity types. */
export interface ActivityPayload {
    /** The micro block hash in which the transaction happened */
    blockHash?: `mh_${string}`;
    blockHeight?: number;
    /** Encoded transaction */
    encodedTx?: `tx_${string}`;
    /** Transaction hash */
    hash?: `th_${string}`;
    /** The micro block index */
    microIndex?: number;
    microTime?: Date;
    /** The signatures */
    signatures?: string[];
    /** The transaction */
    tx?: Record<string, unknown>;
    /** The amount of AE tokens */
    amount?: bigint;
    /** Contract address */
    contractId?: `ct_${string}`;
    logIdx?: number;
    /** Account address */
    recipientId?: `ak_${string}`;
    /** Account address */
    senderId?: `ak_${string}`;
    /** Transaction hash */
    txHash?: `th_${string}`;
    /** Account address */
    recipient?: `ak_${string}`;
    /** Account address */
    sender?: `ak_${string}`;
    tokenId?: number;
    /** The contract call transaction hash */
    callTxHash?: `th_${string}`;
    /** The contract creation transaction hash */
    contractTxHash?: `th_${string}`;
    /** The name of the function */
    function?: string;
    /** The height in which the internal call happened */
    height?: number;
    /** The transaction object */
    internalTx?: Record<string, unknown>;
    /** The kind of internal transfer */
    kind?: ActivityPayloadKind;
    /** The transaction hash of a transaction related to the internal transfer */
    refTxHash?: `th_${string}`;
}
/** Pointee */
export interface Pointee {
    active: boolean;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockHeight: number;
    blockTime: Date;
    /** Account address */
    key: `ak_${string}`;
    /** AENS name */
    name: `${string}.chain`;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    /** Any object */
    tx: Record<string, unknown>;
}
/** Resource not found on the API */
export interface NotFoundResponse {
    /** The message of the error raised */
    error: string;
}
export interface PathsLv15NfV3TransactionsCountIdGetResponses200ContentApplicationJsonSchema {
    /** The channel close mutual transactions count */
    channelCloseMutualTx?: Get200ApplicationJsonProperties;
    /** The channel close solo transactions count */
    channelCloseSoloTx?: PathsKcpsuzV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseSoloTx;
    /** The channel create transactions count */
    channelCreateTx?: Paths1W3C1Z4V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelCreateTx;
    /** The channel deposit transactions count */
    channelDepositTx?: PathsTvtzmvV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelDepositTx;
    /** The channel force progress transactions count */
    channelForceProgressTx?: PathsMxcme6V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelForceProgressTx;
    /** The channel offchain transactions count */
    channelOffchainTx?: Paths1Cnk4LbV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelOffchainTx;
    /** The channel set delegates transactions count */
    channelSetDelegatesTx?: Paths13Ss1Q2V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSetDelegatesTx;
    /** The channel settle transactions count */
    channelSettleTx?: Paths1Gime4MV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSettleTx;
    /** The channel slash transactions count */
    channelSlashTx?: PathsVn5L1LV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSlashTx;
    /** The channel snapshot solo transactions count */
    channelSnapshotSoloTx?: Paths10T1AqyV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSnapshotSoloTx;
    /** The channel withdraw transactions count */
    channelWithdrawTx?: PathsTr523PV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelWithdrawTx;
    /** The contract call transactions count */
    contractCallTx?: PathsChduayV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesContractCallTx;
    /** The contract create transactions count */
    contractCreateTx?: Paths5Shu25V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesContractCreateTx;
    /** The ga attach transactions count */
    gaAttachTx?: Paths1RkuxepV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesGaAttachTx;
    /** The ga meta transactions count */
    gaMetaTx?: PathsQklaaxV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesGaMetaTx;
    /** The name claim transactions count */
    nameClaimTx?: Paths1Hacjy0V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameClaimTx;
    /** The name preclaim transactions count */
    namePreclaimTx?: Paths139X1XaV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNamePreclaimTx;
    /** The name revoke transactions count */
    nameRevokeTx?: Paths1R3Fb8MV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameRevokeTx;
    /** The name transfer transactions count */
    nameTransferTx?: PathsZdcclfV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameTransferTx;
    /** The name update transactions count */
    nameUpdateTx?: Paths1VkyqhtV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameUpdateTx;
    /** The oracle extend transactions count */
    oracleExtendTx?: Paths107D9HzV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleExtendTx;
    /** The oracle query transactions count */
    oracleQueryTx?: PathsS6Nx2KV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleQueryTx;
    /** The oracle register transactions count */
    oracleRegisterTx?: Paths184Oz8CV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleRegisterTx;
    /** The oracle response transactions count */
    oracleResponseTx?: PathsLm5DjtV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleResponseTx;
    /** The paying for transactions count */
    payingForTx?: Paths16B89KuV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesPayingForTx;
    /** The spend transactions count */
    spendTx?: Paths1Ljyzq7V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesSpendTx;
    /** The total transactions count */
    total: number;
}
/** The channel close mutual transactions count */
export interface Get200ApplicationJsonProperties {
    /** The number of times the account was channel id in channel close mutual transaction */
    channelId?: number;
    /** The number of times the account was from id in channel close mutual transaction */
    fromId?: number;
}
/** The channel close solo transactions count */
export interface PathsKcpsuzV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelCloseSoloTx {
    /** The number of times the account was channel id in channel close solo transaction */
    channelId?: number;
    /** The number of times the account was from id in channel close solo transaction */
    fromId?: number;
}
/** The channel create transactions count */
export interface Paths1W3C1Z4V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelCreateTx {
    /** The number of times the account was initiator id in channel create transaction */
    initiatorId?: number;
    /** The number of times the account was responder id in channel create transaction */
    responderId?: number;
}
/** The channel deposit transactions count */
export interface PathsTvtzmvV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelDepositTx {
    /** The number of times the account was channel id in channel deposit transaction */
    channelId?: number;
    /** The number of times the account was from id in channel deposit transaction */
    fromId?: number;
}
/** The channel force progress transactions count */
export interface PathsMxcme6V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelForceProgressTx {
    /** The number of times the account was channel id in channel force progress transaction */
    channelId?: number;
    /** The number of times the account was from id in channel force progress transaction */
    fromId?: number;
}
/** The channel offchain transactions count */
export interface Paths1Cnk4LbV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelOffchainTx {
    /** The number of times the account was channel id in channel offchain transaction */
    channelId?: number;
}
/** The channel set delegates transactions count */
export interface Paths13Ss1Q2V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSetDelegatesTx {
    /** The number of times the account was channel id in channel set delegates transaction */
    channelId?: number;
    /** The number of times the account was from id in channel set delegates transaction */
    fromId?: number;
}
/** The channel settle transactions count */
export interface Paths1Gime4MV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSettleTx {
    /** The number of times the account was channel id in channel settle transaction */
    channelId?: number;
    /** The number of times the account was from id in channel settle transaction */
    fromId?: number;
}
/** The channel slash transactions count */
export interface PathsVn5L1LV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSlashTx {
    /** The number of times the account was channel id in channel slash transaction */
    channelId?: number;
    /** The number of times the account was from id in channel slash transaction */
    fromId?: number;
}
/** The channel snapshot solo transactions count */
export interface Paths10T1AqyV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelSnapshotSoloTx {
    /** The number of times the account was channel id in channel snapshot solo transaction */
    channelId?: number;
    /** The number of times the account was from id in channel snapshot solo transaction */
    fromId?: number;
}
/** The channel withdraw transactions count */
export interface PathsTr523PV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesChannelWithdrawTx {
    /** The number of times the account was channel id in channel withdraw transaction */
    channelId?: number;
    /** The number of times the account was to id in channel withdraw transaction */
    toId?: number;
}
/** The contract call transactions count */
export interface PathsChduayV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesContractCallTx {
    /** The number of times the account was caller id in contract call transaction */
    callerId?: number;
    /** The number of times the account was contract id in contract call transaction */
    contractId?: number;
}
/** The contract create transactions count */
export interface Paths5Shu25V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesContractCreateTx {
    /** The number of times the account was owner id in contract create transaction */
    ownerId?: number;
}
/** The ga attach transactions count */
export interface Paths1RkuxepV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesGaAttachTx {
    /** The number of times the account was owner id in ga attach transaction */
    ownerId?: number;
}
/** The ga meta transactions count */
export interface PathsQklaaxV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesGaMetaTx {
    /** The number of times the account was ga id in ga meta transaction */
    gaId?: number;
}
/** The name claim transactions count */
export interface Paths1Hacjy0V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameClaimTx {
    /** The number of times the account was account id in name claim transaction */
    accountId?: number;
}
/** The name preclaim transactions count */
export interface Paths139X1XaV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNamePreclaimTx {
    /** The number of times the account was account id in name preclaim transaction */
    accountId?: number;
    /** The number of times the account was commitment id in name preclaim transaction */
    commitmentId?: number;
}
/** The name revoke transactions count */
export interface Paths1R3Fb8MV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameRevokeTx {
    /** The number of times the account was account id in name revoke transaction */
    accountId?: number;
    /** The number of times the account was name id in name revoke transaction */
    nameId?: number;
}
/** The name transfer transactions count */
export interface PathsZdcclfV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameTransferTx {
    /** The number of times the account was account id in name transfer transaction */
    accountId?: number;
    /** The number of times the account was name id in name transfer transaction */
    nameId?: number;
    /** The number of times the account was recipient id in name transfer transaction */
    recipientId?: number;
}
/** The name update transactions count */
export interface Paths1VkyqhtV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesNameUpdateTx {
    /** The number of times the account was account id in name update transaction */
    accountId?: number;
    /** The number of times the account was name id in name update transaction */
    nameId?: number;
}
/** The oracle extend transactions count */
export interface Paths107D9HzV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleExtendTx {
    /** The number of times the account was oracle id in oracle extend transaction */
    oracleId?: number;
}
/** The oracle query transactions count */
export interface PathsS6Nx2KV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleQueryTx {
    /** The number of times the account was oracle id in oracle query transaction */
    oracleId?: number;
    /** The number of times the account was sender id in oracle query transaction */
    senderId?: number;
}
/** The oracle register transactions count */
export interface Paths184Oz8CV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleRegisterTx {
    /** The number of times the account was account id in oracle register transaction */
    accountId?: number;
}
/** The oracle response transactions count */
export interface PathsLm5DjtV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesOracleResponseTx {
    /** The number of times the account was oracle id in oracle response transaction */
    oracleId?: number;
}
/** The paying for transactions count */
export interface Paths16B89KuV3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesPayingForTx {
    /** The number of times the account was payer id in paying for transaction */
    payerId?: number;
}
/** The spend transactions count */
export interface Paths1Ljyzq7V3TransactionsCountIdGetResponses200ContentApplicationJsonSchemaPropertiesSpendTx {
    /** The number of times the account was recipient id in spend transaction */
    recipientId?: number;
    /** The number of times the account was sender id in spend transaction */
    senderId?: number;
}
/** Response Schema for AEX141 contract */
export interface Aex141Response {
    /** Metadata base url */
    baseUrl: string;
    /** Block height of the contract creation */
    blockHeight: number;
    /** NFT contract id */
    contractId: `ct_${string}`;
    /** Transaction hash of the contract creation */
    contractTxHash: `th_${string}`;
    /** Creation time of the contract */
    creationTime: Date;
    /** Extensions implemented by the contract */
    extensions: string[];
    /** True if the contract is invalid */
    invalid: boolean;
    /** Limit for amount of tokens or templates */
    limits: Record<string, unknown>;
}
/** Response Schema for templates of a AEX-141 contract */
export interface Aex141TemplatesResponse {
    /** NFT contract id */
    contractId: `ct_${string}`;
    /** Template edition details */
    edition?: Record<string, unknown>;
    /** Log index of the TemplateCreation */
    logIdx: number;
    /** Template id of AEX-141 tokens */
    templateId: number;
    /** Transaction hash of the TemplateCreation */
    txHash: `th_${string}`;
}
/** Response Schema for template tokens of a AEX-141 contract */
export interface Aex141TemplateTokensResponse {
    /** Mint event index */
    logIdx: number;
    /** Owner wallet address */
    ownerId: `ak_${string}`;
    /** NFT id */
    tokenId: number;
    /** Mint transaction hash */
    txHash: `th_${string}`;
}
export interface Paths1Fbvaw8V3Aex141ContractidTokensTokenidGetResponses200ContentApplicationJsonSchema {
    /** Account address */
    data: `ak_${string}`;
}
/** AEx141 Transfer */
export interface Aex141TransferEvent {
    blockHeight: number;
    /** Contract address */
    contractId: `ct_${string}`;
    logIdx: number;
    microIndex: number;
    microTime: Date;
    /** Account address */
    recipient: `ak_${string}`;
    /** Account address */
    sender: `ak_${string}`;
    tokenId: number;
    /** Transaction hash */
    txHash: `th_${string}`;
}
/** Response Schema for AEX9 contract */
export interface Aex9Response {
    /** Id of the contract of the AEX9 tokens */
    contractId: `ct_${string}`;
    /** Transaction hash of the contract creation */
    contractTxHash: `th_${string}`;
    /** The number of decimals for AEX9 token */
    decimals: number;
    /** Token supply updated on event basis (Mint, Burn, Swap) */
    eventSupply: bigint;
    /** Extensions implemented by the contract */
    extensions?: string[];
    /** Count of accounts having balance (nil when contract is not complaint) */
    holders: number;
    /** Token supply right after contract's creation */
    initialSupply: bigint;
    /** True if the contract is invalid */
    invalid: boolean;
    /** Name of AEX9 token */
    name: string;
    /** Symbol of AEX9 token */
    symbol: string;
}
export interface Paths19IxhsmV3Aex9CountGetResponses200ContentApplicationJsonSchema {
    data: number;
}
/** Response Schema for AEX9 contract balances responses */
export interface Aex9ContractBalanceResponse {
    /** The wallet pubkey */
    accountId: `ak_${string}`;
    /** The balance amount */
    amount: bigint;
    /** The block hash, indicating a state of a balance for that block */
    blockHash: number;
    /** The contract id of given token */
    contractId: number;
    /** The block height, indicating a state of a balance for that block height */
    height: number;
    /** The index of the event log that changed the balance */
    lastLogIdx: number;
    /** The hash of the last transaction that changed the balance */
    lastTxHash: `th_${string}`;
}
export interface PathsKr825V3Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema {
    /** The account present on a AEX9 */
    account: `ak_${string}`;
    /** The amount of AEX9 token */
    amount: bigint;
    /** The contract id of given token */
    contract: `ct_${string}`;
}
export interface Get200ApplicationJsonAllOfPropertiesItemsItem {
    /** The account present on a AEX9 */
    account: `ak_${string}`;
    /** The amount of AEX9 token */
    amount: bigint;
    /** The contract id of given token */
    contract: `ct_${string}`;
    /** The block height, indicating a state of a balance for that block height */
    height: number;
}
export interface Channel {
    /** Channel is active */
    active: boolean;
    /** Balance currently left in the channel */
    amount: bigint;
    /** Channel ID */
    channel: `ch_${string}`;
    /** Minimum amount for sufficient funds */
    channelReserve: bigint;
    /** Pubkeys of delegated accounts */
    delegateIds: Record<string, unknown>;
    /** Channel initiator pubkey */
    initiator: `ak_${string}`;
    /** Amount owned by initiator */
    initiatorAmount: bigint;
    /** The last height in which the channel was updated on chain */
    lastUpdatedHeight: number;
    /** The block time in which the channel was last updated */
    lastUpdatedTime: Date;
    /** The hash of the last transaction that updated the channel */
    lastUpdatedTxHash: `th_${string}`;
    /** The transaction type of the last transaction that updated the channel */
    lastUpdatedTxType: string;
    /** Amount of heights locked after a solo closing */
    lockPeriod: number;
    /** Non-inclusive height until which the channel is locked */
    lockedUntil: number;
    /** The channel responder pubkey */
    responder: `ak_${string}`;
    /** Amount owned by responder */
    responderAmount: bigint;
    /** Round after last transaction */
    round: number;
    /** Round of last solo transaction */
    soloRound: number;
    /** The hash of the current channel state */
    stateHash: `st_${string}`;
    /** The amount of times the channel's been updated by any of the channel transactions */
    updatesCount: number;
}
/** ContractCall */
export interface ContractCall {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    /** Transaction hash */
    callTxHash: `th_${string}`;
    /** Contract address */
    contractId: `ct_${string}`;
    /** Transaction hash */
    contractTxHash: `th_${string}`;
    function: string;
    height: number;
    /** Any object */
    internalTx: Record<string, unknown>;
    localIdx: number;
    microIndex: number;
}
/** ContractLog */
export interface ContractLog {
    args: string[];
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockTime: Date;
    /** Transaction hash */
    callTxHash: `th_${string}`;
    /** Contract address */
    contractId: `ct_${string}`;
    /** Transaction hash */
    contractTxHash: `th_${string}`;
    data: string;
    eventHash: string;
    eventName: string | null;
    /** Contract address */
    extCallerContractId: `ct_${string}` | null;
    /** Transaction hash */
    extCallerContractTxHash: `th_${string}` | null;
    height: number;
    logIdx: number;
    microIndex: number;
    parentContractId: number | null;
}
/** Contract creation info */
export interface Contract {
    aexnType: string | null;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    /** Contract address */
    contract: `ct_${string}`;
    /** Any object */
    createTx: Record<string, unknown>;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
}
/** Key Block */
export interface KeyBlock {
    /** The beneficiary */
    beneficiary: `ak_${string}`;
    /** The beneficiary reward */
    beneficiaryReward?: number;
    /** Key block hash */
    hash: `kh_${string}`;
    /** The block height */
    height: number;
    /** The info */
    info: `cb_${string}`;
    /** The number of micro blocks */
    microBlocksCount: number;
    /** The miner public key */
    miner: `ak_${string}`;
    /** The nonce */
    nonce?: number;
    /** The proof of work */
    pow?: number[];
    /** The previous block hash */
    prevHash: `kh_${string}` | `mh_${string}`;
    /** The previous key block hash */
    prevKeyHash: `kh_${string}`;
    /** Blocks state hash */
    stateHash: `bs_${string}`;
    /** The target */
    target: number;
    /** The time */
    time: Date;
    /** The number of transactions */
    transactionsCount: number;
    /** The version */
    version: number;
}
/** MicroBlock */
export interface MicroBlock {
    /** The micro block hash */
    hash: `mh_${string}`;
    /** The block height */
    height: number;
    /** The index of the micro-block on the micro-block height, starting from 0 */
    microBlockIndex: number;
    /** \"no_fraud\" or api encoded Proof of Fraud hash */
    pofHash: string;
    /** The previous block hash */
    prevHash: `kh_${string}` | `mh_${string}`;
    /** The previous key block hash */
    prevKeyHash: `kh_${string}`;
    /** Micro block signature */
    signature: `sg_${string}`;
    /** Blocks state hash */
    stateHash: `bs_${string}`;
    /** The time */
    time: Date;
    /** The number of transactions */
    transactionsCount: number;
    /** Transactions hash */
    txsHash: `bx_${string}`;
    /** The version */
    version: number;
}
/** Transaction */
export interface Transaction {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    /** The block height */
    blockHeight: number;
    /** Encoded transaction */
    encodedTx: `tx_${string}`;
    /** Transaction hash */
    hash: `th_${string}`;
    /** The micro block index */
    microIndex: number;
    /** The unix timestamp */
    microTime: Date;
    /** The signatures */
    signatures: string[];
    /** The transaction */
    tx: Record<string, unknown>;
}
/** Name */
export interface Name {
    active: boolean;
    activeFrom: number;
    approximateActivationTime: Date;
    approximateExpireTime: Date;
    /** Auction */
    auction: Auction | null;
    auctionTimeout: number;
    expireHeight: number;
    /** AENS name hash */
    hash: `nm_${string}`;
    /** AENS name */
    name: `${string}.chain`;
    nameFee: bigint;
    ownership: NameOwnership;
    /** Dictionary of <any> */
    pointers: {
        [propertyName: string]: any;
    };
    revoke: NameTx | null;
}
/** Auction */
export interface Auction {
    activationTime: Date;
    approximateExpireTime: Date;
    auctionEnd: number;
    lastBid: AuctionLastBid;
    /** AENS name */
    name: `${string}.chain`;
    nameFee: bigint;
}
export interface AuctionLastBid {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockHeight: number;
    /** Encoded transaction */
    encodedTx: `tx_${string}`;
    /** Transaction hash */
    hash: `th_${string}`;
    microIndex: number;
    microTime: Date;
    signatures: string[];
    /** Any object */
    tx: Record<string, unknown>;
}
export interface NameOwnership {
    /** Account address */
    current?: `ak_${string}`;
    /** Account address */
    original?: `ak_${string}`;
}
export interface NameTx {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockHeight: number;
    /** Transaction hash */
    hash: `th_${string}`;
    microIndex: number;
    microTime: Date;
    signatures: string[];
    tx: NameTxTx;
}
export interface NameTxTx {
    /** Account address */
    accountId: `ak_${string}`;
    fee: bigint;
    /** AENS name hash */
    nameId: `nm_${string}`;
    nonce: number;
    ttl?: number;
    type: string;
    version: number;
}
export interface PathsCrb9BgV3NamesAuctionsIdClaimsGetResponses200ContentApplicationJsonSchema {
    data: NameClaim[];
}
/** Name Claim */
export interface NameClaim {
    activeFrom: number;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    height: number;
    internalSource?: boolean;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    /** Any object */
    tx: Record<string, unknown>;
}
/** Name Transfer */
export interface NameTransfer {
    activeFrom: number;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    height: number;
    internalSource?: boolean;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    /** Any object */
    tx: Record<string, unknown>;
}
/** Name Update */
export interface NameUpdate {
    activeFrom: number;
    /** Micro block hash */
    blockHash: `mh_${string}`;
    height: number;
    internalSource?: boolean;
    /** Transaction hash */
    sourceTxHash: `th_${string}`;
    sourceTxType: string;
    /** Any object */
    tx: Record<string, unknown>;
}
export interface Oracle {
    /** The oracle active status */
    active: boolean;
    /** The block height when the oracle became active */
    activeFrom: number;
    /** The approximate time when the oracle expires */
    approximateExpireTime: Date;
    /** The block height when the oracle expires */
    expireHeight: number;
    /** The oracle's query and response formats */
    format: OracleFormat;
    /** Oracle address */
    oracle: `ok_${string}`;
    /** The query fee */
    queryFee: bigint;
    register: OracleTx;
    /** The block time in which the oracle was registered, use `register.micro_time` instead */
    registerTime: Date;
    /** The transaction hash in which the oracle was registered, use `register.hash` instead */
    registerTxHash: `th_${string}`;
}
/** The oracle's query and response formats */
export interface OracleFormat {
    /** The query format */
    query: string;
    /** The response format */
    response: string;
}
export interface OracleTx {
    /** Micro block hash */
    blockHash: `mh_${string}`;
    blockHeight: number;
    /** Encoded transaction */
    encodedTx: `tx_${string}`;
    /** Transaction hash */
    hash: `th_${string}`;
    microIndex: number;
    microTime: Date;
    signatures: string[];
    tx: OracleTxTx;
    /** use `hash` instead */
    txHash: `th_${string}`;
}
export interface OracleTxTx {
    abiVersion: number;
    /** Account address */
    accountId: `ak_${string}`;
    fee: bigint;
    nonce: number;
    /** Oracle address */
    oracleId: `ok_${string}`;
    /** Expiration of the oracle */
    oracleTtl: OracleTxOracleTtl;
    queryFee: bigint;
    queryFormat: string;
    responseFormat: string;
    ttl?: number;
    type: string;
    version: number;
}
/** Expiration of the oracle */
export interface OracleTxOracleTtl {
    type: OracleTxOracleTtlType;
    value: number;
}
export interface OracleExtend {
    /** The hash of the block in which it ocurred */
    blockHash: `mh_${string}`;
    /** The block height */
    height: number;
    /** The hash of the transaction in which the extend was done */
    sourceTxHash: `th_${string}`;
    /** The type of the transaction in which the extend was done, it can be either via a contract call or an extend transaction */
    sourceTxType: string;
    tx: OracleExtendTx;
}
export interface OracleExtendTx {
    /** The transaction fee */
    fee: bigint;
    /** The nonce */
    nonce: number;
    /** The oracle ID of this query */
    oracleId: `ok_${string}`;
    /** Expiration of the oracle */
    oracleTtl: OracleExtendTxOracleTtl;
    /** Transaction TTL */
    ttl?: number;
}
/** Expiration of the oracle */
export interface OracleExtendTxOracleTtl {
    type: OracleExtendTxOracleTtlType;
    value: number;
}
export interface OracleQuery {
    /** The hash of the block in which it ocurred */
    blockHash: `mh_${string}`;
    /** The time of the block */
    blockTime: Date;
    /** The transaction fee */
    fee: bigint;
    /** The block height */
    height: number;
    /** The nonce */
    nonce: number;
    /** The oracle ID of this query */
    oracleId: `ok_${string}`;
    /** Base64 encoding of the query */
    query: string;
    /** The query fee */
    queryFee: bigint;
    /** Oracle query ID */
    queryId: `oq_${string}`;
    /** Expiration of the query */
    queryTtl: Record<string, unknown>;
    response?: OracleResponse;
    /** Expiration of the response */
    responseTtl: Record<string, unknown>;
    /** The creator of the query */
    senderId: `ak_${string}`;
    /** The hash of the transaction in which the query was created */
    sourceTxHash: `th_${string}`;
    /** The type of the transaction in which the query was created, it can be either via a contract call or a query transaction */
    sourceTxType: string;
    /** Transaction TTL */
    ttl: number;
}
export interface OracleResponse {
    /** The hash of the block in which it ocurred */
    blockHash: `mh_${string}`;
    /** The time of the block */
    blockTime: Date;
    /** The transaction fee */
    fee: bigint;
    /** The block height */
    height: number;
    /** The nonce */
    nonce: number;
    /** The oracle ID of this response */
    oracleId: `ok_${string}`;
    query: OracleResponse;
    /** Oracle query ID */
    queryId: `oq_${string}`;
    /** Base64 encoding of the response */
    response: string;
    /** Expiration of the response */
    responseTtl: Record<string, unknown>;
    /** The hash of the transaction in which the response was created */
    sourceTxHash: `th_${string}`;
    /** The type of the transaction in which the response was created, it can be either via a contract call or a respond transaction */
    sourceTxType: string;
    /** Transaction TTL */
    ttl: number;
}
/** Stats */
export interface Stats {
    /** The fees trend */
    feesTrend?: number;
    /** The last 24hs average transaction fees */
    last24HsAverageTransactionFees?: number;
    /** The last 24hs transactions */
    last24HsTransactions?: number;
    /** The max transactions per second */
    maxTransactionsPerSecond?: number;
    /** The max transactions per second block hash */
    maxTransactionsPerSecondBlockHash?: `kh_${string}`;
    /** The number of miners */
    minersCount?: number;
    /** The transactions trend */
    transactionsTrend?: number;
}
/** Stat */
export interface Stat {
    /** The statistic count */
    count: number;
    /** The statistic end date (not taken into account) */
    endDate: string;
    /** The statistic start date */
    startDate: string;
}
/** DeltaStat */
export interface DeltaStat {
    /** The number of auctions started */
    auctionsStarted: number;
    /** The block reward */
    blockReward: bigint;
    /** The amount burned in auctions */
    burnedInAuctions: bigint;
    /** The number of channels closed */
    channelsClosed: number;
    /** The number of channels opened */
    channelsOpened: number;
    /** The number of contracts created */
    contractsCreated: number;
    /** The dev reward */
    devReward: bigint;
    /** The generation */
    height: number;
    /** The last transaction hash for this height */
    lastTxHash: `th_${string}`;
    /** The amount locked in auctions */
    lockedInAuctions: bigint;
    /** The amount locked in channels */
    lockedInChannels: bigint;
    /** The number of names activated */
    namesActivated: number;
    /** The number of names expired */
    namesExpired: number;
    /** The number of names revoked */
    namesRevoked: number;
    /** The number of oracles expired */
    oraclesExpired: number;
    /** The number of oracles registered */
    oraclesRegistered: number;
}
/** Miner */
export interface Miner {
    /** The miner (beneficiary) address */
    miner: `ak_${string}`;
    /** The accumulated reward on the miner (beneficiary) address */
    totalReward: bigint;
}
/** TotalStat */
export interface TotalStat {
    /** The number of active auctions */
    activeAuctions: number;
    /** The number of active names */
    activeNames: number;
    /** The number of active oracles */
    activeOracles: number;
    /** The amount burned in auctions */
    burnedInAuctions: bigint;
    /** The number of contracts */
    contracts: number;
    /** The generation */
    height: number;
    /** The number of inactive names */
    inactiveNames: number;
    /** The number of inactive oracles */
    inactiveOracles: number;
    /** The last transaction hash for this height */
    lastTxHash: `th_${string}`;
    /** The amount locked in auctions */
    lockedInAuctions: bigint;
    /** The amount locked in channels */
    lockedInChannels: bigint;
    /** The number of open channels */
    openChannels: number;
    /** The sum of block rewards */
    sumBlockReward: bigint;
    /** The sum of dev rewards */
    sumDevReward: bigint;
    /** The total token supply */
    totalTokenSupply: bigint;
}
export interface Status {
    mdwAsyncTasks: StatusMdwAsyncTasks;
    /** The approximate number of generations synced per minute on middleware */
    mdwGensPerMinute: number;
    /** The top generation up to which the middleware was synced */
    mdwHeight: number;
    /** The last middleware migration ran */
    mdwLastMigration: number;
    /** The middleware's git revision of the latest commit applied */
    mdwRevision: string;
    /** true if middleware was synced up to the latest node block */
    mdwSynced: boolean;
    /** true if middleware is syncing (i.e. it didn't stop due to an error) */
    mdwSyncing: boolean;
    /** index of the latest synced transaction */
    mdwTxIndex: number;
    /** The middleware's version */
    mdwVersion: string;
    /** The node generation of the last block synced */
    nodeHeight: number;
    /** The percentage of generations synced on the node */
    nodeProgress: number;
    /** The node's git revision of the latest commit applied */
    nodeRevision: string;
    /** If true, the node is still processing additional blocks to reach the latest one */
    nodeSyncing: boolean;
    /** The node's version */
    nodeVersion: string;
}
export interface StatusMdwAsyncTasks {
    longTasks: number;
    producerBuffer: number;
    totalPending: number;
}
export interface Transfer {
    /** Account address */
    accountId: `ak_${string}`;
    amount: bigint;
    height: number;
    kind: TransferKind;
    /** Micro block hash */
    refBlockHash: `mh_${string}` | null;
    /** Transaction hash */
    refTxHash: `th_${string}` | null;
    refTxType: string | null;
}
/** AEx9 Transfer */
export interface Aex9TransferEvent {
    amount: bigint;
    blockHeight: number;
    /** Contract address */
    contractId: `ct_${string}`;
    logIdx: number;
    microIndex: number;
    microTime: Date;
    /** Account address */
    recipientId: `ak_${string}`;
    /** Account address */
    senderId: `ak_${string}`;
    /** Transaction hash */
    txHash: `th_${string}`;
}
/** Response Schema for AEX9 transfer responses */
export interface Aex9TransferResponse {
    /** Transfer amount of AEX9 token */
    amount: bigint;
    /** The block height */
    blockHeight: number;
    /** AEX9 token transfer index */
    callTxi: number;
    /** Contract address */
    contractId: `ct_${string}`;
    /** Log index */
    logIdx: number;
    /** The unix timestamp */
    microTime: Date;
    /** Recipient of AEX9 transfer */
    recipient: `ak_${string}`;
    /** Sender of AEX9 transfer */
    sender: `ak_${string}`;
}
/** Contract call made inside of a contract call or contract create transaction */
export interface InternalContractCallEvent {
    /** The micro block hash in which the transaction happened */
    blockHash: `mh_${string}`;
    /** The contract call transaction hash */
    callTxHash?: `th_${string}`;
    /** Contract address */
    contractId: `ct_${string}`;
    /** The contract creation transaction hash */
    contractTxHash: `th_${string}`;
    /** The name of the function */
    function: string;
    /** The height in which the internal call happened */
    height: number;
    /** The transaction object */
    internalTx: Record<string, unknown>;
    /** The micro block index */
    microIndex: number;
}
/** Internal transfer */
export interface InternalTransferEvent {
    /** The amount of AE tokens */
    amount: bigint;
    /** The kind of internal transfer */
    kind: InternalTransferEventKind;
    /** The transaction hash of a transaction related to the internal transfer */
    refTxHash: `th_${string}`;
}
/** Name claim */
export interface NameClaimEvent {
    /** The claim transaction (internal or not) */
    tx: Record<string, unknown>;
    /** The hash of the transaction (either a name claim or a contract call transaction) */
    txHash: `th_${string}`;
}
/** Known values of {@link Enum0} that the service accepts. */
export declare enum KnownEnum0 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum0. \
 * {@link KnownEnum0} can be used interchangeably with Enum0,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum0 = string;
/** Known values of {@link Enum1} that the service accepts. */
export declare enum KnownEnum1 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum1. \
 * {@link KnownEnum1} can be used interchangeably with Enum1,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum1 = string;
/** Known values of {@link DexSwapAction} that the service accepts. */
export declare enum KnownDexSwapAction {
    /** Swap */
    Swap = "SWAP",
    /** BUY */
    BUY = "BUY",
    /** Sell */
    Sell = "SELL"
}
/**
 * Defines values for DexSwapAction. \
 * {@link KnownDexSwapAction} can be used interchangeably with DexSwapAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SWAP** \
 * **BUY** \
 * **SELL**
 */
export type DexSwapAction = string;
/** Known values of {@link Enum3} that the service accepts. */
export declare enum KnownEnum3 {
    /** Transactions */
    Transactions = "transactions",
    /** Aexn */
    Aexn = "aexn",
    /** Aex9 */
    Aex9 = "aex9",
    /** Aex141 */
    Aex141 = "aex141",
    /** Contract */
    Contract = "contract",
    /** Transfers */
    Transfers = "transfers",
    /** Claims */
    Claims = "claims",
    /** Swaps */
    Swaps = "swaps"
}
/**
 * Defines values for Enum3. \
 * {@link KnownEnum3} can be used interchangeably with Enum3,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **transactions** \
 * **aexn** \
 * **aex9** \
 * **aex141** \
 * **contract** \
 * **transfers** \
 * **claims** \
 * **swaps**
 */
export type Enum3 = string;
/** Known values of {@link Enum4} that the service accepts. */
export declare enum KnownEnum4 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum4. \
 * {@link KnownEnum4} can be used interchangeably with Enum4,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum4 = string;
/** Known values of {@link ActivityPayloadKind} that the service accepts. */
export declare enum KnownActivityPayloadKind {
    /** AccountsExtraLima */
    AccountsExtraLima = "accounts_extra_lima",
    /** AccountsFortuna */
    AccountsFortuna = "accounts_fortuna",
    /** AccountsGenesis */
    AccountsGenesis = "accounts_genesis",
    /** AccountsLima */
    AccountsLima = "accounts_lima",
    /** AccountsMinerva */
    AccountsMinerva = "accounts_minerva",
    /** ContractsLima */
    ContractsLima = "contracts_lima",
    /** RewardDev */
    RewardDev = "reward_dev",
    /** RewardBlock */
    RewardBlock = "reward_block",
    /** FeeRefundOracle */
    FeeRefundOracle = "fee_refund_oracle",
    /** FeeLockName */
    FeeLockName = "fee_lock_name",
    /** FeeRefundName */
    FeeRefundName = "fee_refund_name",
    /** FeeSpendName */
    FeeSpendName = "fee_spend_name",
    /** RewardOracle */
    RewardOracle = "reward_oracle"
}
/**
 * Defines values for ActivityPayloadKind. \
 * {@link KnownActivityPayloadKind} can be used interchangeably with ActivityPayloadKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **accounts_extra_lima** \
 * **accounts_fortuna** \
 * **accounts_genesis** \
 * **accounts_lima** \
 * **accounts_minerva** \
 * **contracts_lima** \
 * **reward_dev** \
 * **reward_block** \
 * **fee_refund_oracle** \
 * **fee_lock_name** \
 * **fee_refund_name** \
 * **fee_spend_name** \
 * **reward_oracle**
 */
export type ActivityPayloadKind = string;
/** Known values of {@link ActivityType} that the service accepts. */
export declare enum KnownActivityType {
    /** SpendTxEvent */
    SpendTxEvent = "SpendTxEvent",
    /** OracleRegisterTxEvent */
    OracleRegisterTxEvent = "OracleRegisterTxEvent",
    /** OracleExtendTxEvent */
    OracleExtendTxEvent = "OracleExtendTxEvent",
    /** OracleQueryTxEvent */
    OracleQueryTxEvent = "OracleQueryTxEvent",
    /** OracleResponseTxEvent */
    OracleResponseTxEvent = "OracleResponseTxEvent",
    /** NamePreclaimTxEvent */
    NamePreclaimTxEvent = "NamePreclaimTxEvent",
    /** NameClaimTxEvent */
    NameClaimTxEvent = "NameClaimTxEvent",
    /** NameTransferTxEvent */
    NameTransferTxEvent = "NameTransferTxEvent",
    /** NameUpdateTxEvent */
    NameUpdateTxEvent = "NameUpdateTxEvent",
    /** NameRevokeTxEvent */
    NameRevokeTxEvent = "NameRevokeTxEvent",
    /** ContractCreateTxEvent */
    ContractCreateTxEvent = "ContractCreateTxEvent",
    /** ContractCallTxEvent */
    ContractCallTxEvent = "ContractCallTxEvent",
    /** GaAttachTxEvent */
    GaAttachTxEvent = "GaAttachTxEvent",
    /** GaMetaTxEvent */
    GaMetaTxEvent = "GaMetaTxEvent",
    /** ChannelCreateTxEvent */
    ChannelCreateTxEvent = "ChannelCreateTxEvent",
    /** ChannelDepositTxEvent */
    ChannelDepositTxEvent = "ChannelDepositTxEvent",
    /** ChannelWithdrawTxEvent */
    ChannelWithdrawTxEvent = "ChannelWithdrawTxEvent",
    /** ChannelForceProgressTxEvent */
    ChannelForceProgressTxEvent = "ChannelForceProgressTxEvent",
    /** ChannelCloseMutualTxEvent */
    ChannelCloseMutualTxEvent = "ChannelCloseMutualTxEvent",
    /** ChannelCloseSoloTxEvent */
    ChannelCloseSoloTxEvent = "ChannelCloseSoloTxEvent",
    /** ChannelSlashTxEvent */
    ChannelSlashTxEvent = "ChannelSlashTxEvent",
    /** ChannelSettleTxEvent */
    ChannelSettleTxEvent = "ChannelSettleTxEvent",
    /** ChannelSnapshotSoloTxEvent */
    ChannelSnapshotSoloTxEvent = "ChannelSnapshotSoloTxEvent",
    /** ChannelSetDelegatesTxEvent */
    ChannelSetDelegatesTxEvent = "ChannelSetDelegatesTxEvent",
    /** ChannelOffchainTxEvent */
    ChannelOffchainTxEvent = "ChannelOffchainTxEvent",
    /** ChannelClientReconnectTxEvent */
    ChannelClientReconnectTxEvent = "ChannelClientReconnectTxEvent",
    /** PayingForTxEvent */
    PayingForTxEvent = "PayingForTxEvent"
}
/**
 * Defines values for ActivityType. \
 * {@link KnownActivityType} can be used interchangeably with ActivityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SpendTxEvent** \
 * **OracleRegisterTxEvent** \
 * **OracleExtendTxEvent** \
 * **OracleQueryTxEvent** \
 * **OracleResponseTxEvent** \
 * **NamePreclaimTxEvent** \
 * **NameClaimTxEvent** \
 * **NameTransferTxEvent** \
 * **NameUpdateTxEvent** \
 * **NameRevokeTxEvent** \
 * **ContractCreateTxEvent** \
 * **ContractCallTxEvent** \
 * **GaAttachTxEvent** \
 * **GaMetaTxEvent** \
 * **ChannelCreateTxEvent** \
 * **ChannelDepositTxEvent** \
 * **ChannelWithdrawTxEvent** \
 * **ChannelForceProgressTxEvent** \
 * **ChannelCloseMutualTxEvent** \
 * **ChannelCloseSoloTxEvent** \
 * **ChannelSlashTxEvent** \
 * **ChannelSettleTxEvent** \
 * **ChannelSnapshotSoloTxEvent** \
 * **ChannelSetDelegatesTxEvent** \
 * **ChannelOffchainTxEvent** \
 * **ChannelClientReconnectTxEvent** \
 * **PayingForTxEvent**
 */
export type ActivityType = string;
/** Known values of {@link Enum7} that the service accepts. */
export declare enum KnownEnum7 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum7. \
 * {@link KnownEnum7} can be used interchangeably with Enum7,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum7 = string;
/** Known values of {@link Enum8} that the service accepts. */
export declare enum KnownEnum8 {
    /** Creation */
    Creation = "creation",
    /** Name */
    Name = "name",
    /** Symbol */
    Symbol = "symbol"
}
/**
 * Defines values for Enum8. \
 * {@link KnownEnum8} can be used interchangeably with Enum8,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **creation** \
 * **name** \
 * **symbol**
 */
export type Enum8 = string;
/** Known values of {@link Enum9} that the service accepts. */
export declare enum KnownEnum9 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum9. \
 * {@link KnownEnum9} can be used interchangeably with Enum9,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum9 = string;
/** Known values of {@link Enum10} that the service accepts. */
export declare enum KnownEnum10 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum10. \
 * {@link KnownEnum10} can be used interchangeably with Enum10,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum10 = string;
/** Known values of {@link Enum11} that the service accepts. */
export declare enum KnownEnum11 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum11. \
 * {@link KnownEnum11} can be used interchangeably with Enum11,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum11 = string;
/** Known values of {@link Enum12} that the service accepts. */
export declare enum KnownEnum12 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum12. \
 * {@link KnownEnum12} can be used interchangeably with Enum12,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum12 = string;
/** Known values of {@link Enum13} that the service accepts. */
export declare enum KnownEnum13 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum13. \
 * {@link KnownEnum13} can be used interchangeably with Enum13,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum13 = string;
/** Known values of {@link Enum14} that the service accepts. */
export declare enum KnownEnum14 {
    /** Creation */
    Creation = "creation",
    /** Name */
    Name = "name",
    /** Symbol */
    Symbol = "symbol"
}
/**
 * Defines values for Enum14. \
 * {@link KnownEnum14} can be used interchangeably with Enum14,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **creation** \
 * **name** \
 * **symbol**
 */
export type Enum14 = string;
/** Known values of {@link Enum15} that the service accepts. */
export declare enum KnownEnum15 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum15. \
 * {@link KnownEnum15} can be used interchangeably with Enum15,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum15 = string;
/** Known values of {@link Enum16} that the service accepts. */
export declare enum KnownEnum16 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum16. \
 * {@link KnownEnum16} can be used interchangeably with Enum16,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum16 = string;
/** Known values of {@link Enum17} that the service accepts. */
export declare enum KnownEnum17 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum17. \
 * {@link KnownEnum17} can be used interchangeably with Enum17,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum17 = string;
/** Known values of {@link Enum18} that the service accepts. */
export declare enum KnownEnum18 {
    /** Active */
    Active = "active",
    /** Inactive */
    Inactive = "inactive"
}
/**
 * Defines values for Enum18. \
 * {@link KnownEnum18} can be used interchangeably with Enum18,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **active** \
 * **inactive**
 */
export type Enum18 = string;
/** Known values of {@link Enum19} that the service accepts. */
export declare enum KnownEnum19 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum19. \
 * {@link KnownEnum19} can be used interchangeably with Enum19,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum19 = string;
/** Known values of {@link Enum20} that the service accepts. */
export declare enum KnownEnum20 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum20. \
 * {@link KnownEnum20} can be used interchangeably with Enum20,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum20 = string;
/** Known values of {@link Enum21} that the service accepts. */
export declare enum KnownEnum21 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum21. \
 * {@link KnownEnum21} can be used interchangeably with Enum21,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum21 = string;
/** Known values of {@link Enum22} that the service accepts. */
export declare enum KnownEnum22 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum22. \
 * {@link KnownEnum22} can be used interchangeably with Enum22,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum22 = string;
/** Known values of {@link Enum23} that the service accepts. */
export declare enum KnownEnum23 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum23. \
 * {@link KnownEnum23} can be used interchangeably with Enum23,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum23 = string;
/** Known values of {@link Enum24} that the service accepts. */
export declare enum KnownEnum24 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum24. \
 * {@link KnownEnum24} can be used interchangeably with Enum24,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum24 = string;
/** Known values of {@link Enum25} that the service accepts. */
export declare enum KnownEnum25 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum25. \
 * {@link KnownEnum25} can be used interchangeably with Enum25,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum25 = string;
/** Known values of {@link Enum26} that the service accepts. */
export declare enum KnownEnum26 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum26. \
 * {@link KnownEnum26} can be used interchangeably with Enum26,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum26 = string;
/** Known values of {@link Enum27} that the service accepts. */
export declare enum KnownEnum27 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum27. \
 * {@link KnownEnum27} can be used interchangeably with Enum27,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum27 = string;
/** Known values of {@link Enum28} that the service accepts. */
export declare enum KnownEnum28 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum28. \
 * {@link KnownEnum28} can be used interchangeably with Enum28,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum28 = string;
/** Known values of {@link Enum29} that the service accepts. */
export declare enum KnownEnum29 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum29. \
 * {@link KnownEnum29} can be used interchangeably with Enum29,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum29 = string;
/** Known values of {@link Enum30} that the service accepts. */
export declare enum KnownEnum30 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum30. \
 * {@link KnownEnum30} can be used interchangeably with Enum30,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum30 = string;
/** Known values of {@link Enum31} that the service accepts. */
export declare enum KnownEnum31 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum31. \
 * {@link KnownEnum31} can be used interchangeably with Enum31,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum31 = string;
/** Known values of {@link Enum32} that the service accepts. */
export declare enum KnownEnum32 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum32. \
 * {@link KnownEnum32} can be used interchangeably with Enum32,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum32 = string;
/** Known values of {@link OracleTxOracleTtlType} that the service accepts. */
export declare enum KnownOracleTxOracleTtlType {
    /** Delta */
    Delta = "delta",
    /** Block */
    Block = "block"
}
/**
 * Defines values for OracleTxOracleTtlType. \
 * {@link KnownOracleTxOracleTtlType} can be used interchangeably with OracleTxOracleTtlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **delta** \
 * **block**
 */
export type OracleTxOracleTtlType = string;
/** Known values of {@link OracleExtendTxOracleTtlType} that the service accepts. */
export declare enum KnownOracleExtendTxOracleTtlType {
    /** Delta */
    Delta = "delta",
    /** Block */
    Block = "block"
}
/**
 * Defines values for OracleExtendTxOracleTtlType. \
 * {@link KnownOracleExtendTxOracleTtlType} can be used interchangeably with OracleExtendTxOracleTtlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **delta** \
 * **block**
 */
export type OracleExtendTxOracleTtlType = string;
/** Known values of {@link Enum35} that the service accepts. */
export declare enum KnownEnum35 {
    /** Day */
    Day = "day",
    /** Week */
    Week = "week",
    /** Month */
    Month = "month"
}
/**
 * Defines values for Enum35. \
 * {@link KnownEnum35} can be used interchangeably with Enum35,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **day** \
 * **week** \
 * **month**
 */
export type Enum35 = string;
/** Known values of {@link Enum36} that the service accepts. */
export declare enum KnownEnum36 {
    /** Key */
    Key = "key",
    /** Micro */
    Micro = "micro"
}
/**
 * Defines values for Enum36. \
 * {@link KnownEnum36} can be used interchangeably with Enum36,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **key** \
 * **micro**
 */
export type Enum36 = string;
/** Known values of {@link Enum37} that the service accepts. */
export declare enum KnownEnum37 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum37. \
 * {@link KnownEnum37} can be used interchangeably with Enum37,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum37 = string;
/** Known values of {@link Enum38} that the service accepts. */
export declare enum KnownEnum38 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum38. \
 * {@link KnownEnum38} can be used interchangeably with Enum38,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum38 = string;
/** Known values of {@link Enum39} that the service accepts. */
export declare enum KnownEnum39 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum39. \
 * {@link KnownEnum39} can be used interchangeably with Enum39,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum39 = string;
/** Known values of {@link Enum40} that the service accepts. */
export declare enum KnownEnum40 {
    /** Day */
    Day = "day",
    /** Week */
    Week = "week",
    /** Month */
    Month = "month"
}
/**
 * Defines values for Enum40. \
 * {@link KnownEnum40} can be used interchangeably with Enum40,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **day** \
 * **week** \
 * **month**
 */
export type Enum40 = string;
/** Known values of {@link Enum41} that the service accepts. */
export declare enum KnownEnum41 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum41. \
 * {@link KnownEnum41} can be used interchangeably with Enum41,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum41 = string;
/** Known values of {@link Enum42} that the service accepts. */
export declare enum KnownEnum42 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum42. \
 * {@link KnownEnum42} can be used interchangeably with Enum42,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum42 = string;
/** Known values of {@link Enum43} that the service accepts. */
export declare enum KnownEnum43 {
    /** Day */
    Day = "day",
    /** Week */
    Week = "week",
    /** Month */
    Month = "month"
}
/**
 * Defines values for Enum43. \
 * {@link KnownEnum43} can be used interchangeably with Enum43,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **day** \
 * **week** \
 * **month**
 */
export type Enum43 = string;
/** Known values of {@link Enum44} that the service accepts. */
export declare enum KnownEnum44 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum44. \
 * {@link KnownEnum44} can be used interchangeably with Enum44,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum44 = string;
/** Known values of {@link Get0ItemsItem} that the service accepts. */
export declare enum KnownGet0ItemsItem {
    /** ChannelCloseMutual */
    ChannelCloseMutual = "channel_close_mutual",
    /** ChannelCloseSolo */
    ChannelCloseSolo = "channel_close_solo",
    /** ChannelCreate */
    ChannelCreate = "channel_create",
    /** ChannelDeposit */
    ChannelDeposit = "channel_deposit",
    /** ChannelForceProgress */
    ChannelForceProgress = "channel_force_progress",
    /** ChannelOffchain */
    ChannelOffchain = "channel_offchain",
    /** ChannelSettle */
    ChannelSettle = "channel_settle",
    /** ChannelSlash */
    ChannelSlash = "channel_slash",
    /** ChannelSnapshotSolo */
    ChannelSnapshotSolo = "channel_snapshot_solo",
    /** ChannelWithdraw */
    ChannelWithdraw = "channel_withdraw",
    /** ContractCall */
    ContractCall = "contract_call",
    /** ContractCreate */
    ContractCreate = "contract_create",
    /** GaAttach */
    GaAttach = "ga_attach",
    /** GaMeta */
    GaMeta = "ga_meta",
    /** NameClaim */
    NameClaim = "name_claim",
    /** NamePreclaim */
    NamePreclaim = "name_preclaim",
    /** NameRevoke */
    NameRevoke = "name_revoke",
    /** NameTransfer */
    NameTransfer = "name_transfer",
    /** NameUpdate */
    NameUpdate = "name_update",
    /** OracleExtend */
    OracleExtend = "oracle_extend",
    /** OracleQuery */
    OracleQuery = "oracle_query",
    /** OracleRegister */
    OracleRegister = "oracle_register",
    /** OracleResponse */
    OracleResponse = "oracle_response",
    /** PayingFor */
    PayingFor = "paying_for",
    /** Spend */
    Spend = "spend"
}
/**
 * Defines values for Get0ItemsItem. \
 * {@link KnownGet0ItemsItem} can be used interchangeably with Get0ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **channel_close_mutual** \
 * **channel_close_solo** \
 * **channel_create** \
 * **channel_deposit** \
 * **channel_force_progress** \
 * **channel_offchain** \
 * **channel_settle** \
 * **channel_slash** \
 * **channel_snapshot_solo** \
 * **channel_withdraw** \
 * **contract_call** \
 * **contract_create** \
 * **ga_attach** \
 * **ga_meta** \
 * **name_claim** \
 * **name_preclaim** \
 * **name_revoke** \
 * **name_transfer** \
 * **name_update** \
 * **oracle_extend** \
 * **oracle_query** \
 * **oracle_register** \
 * **oracle_response** \
 * **paying_for** \
 * **spend**
 */
export type Get0ItemsItem = string;
/** Known values of {@link Get1ItemsItem} that the service accepts. */
export declare enum KnownGet1ItemsItem {
    /** Channel */
    Channel = "channel",
    /** Contract */
    Contract = "contract",
    /** Ga */
    Ga = "ga",
    /** Name */
    Name = "name",
    /** Oracle */
    Oracle = "oracle",
    /** PayingFor */
    PayingFor = "paying_for",
    /** Spend */
    Spend = "spend"
}
/**
 * Defines values for Get1ItemsItem. \
 * {@link KnownGet1ItemsItem} can be used interchangeably with Get1ItemsItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **channel** \
 * **contract** \
 * **ga** \
 * **name** \
 * **oracle** \
 * **paying_for** \
 * **spend**
 */
export type Get1ItemsItem = string;
/** Known values of {@link Enum47} that the service accepts. */
export declare enum KnownEnum47 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum47. \
 * {@link KnownEnum47} can be used interchangeably with Enum47,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum47 = string;
/** Known values of {@link Enum48} that the service accepts. */
export declare enum KnownEnum48 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum48. \
 * {@link KnownEnum48} can be used interchangeably with Enum48,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum48 = string;
/** Known values of {@link TransferKind} that the service accepts. */
export declare enum KnownTransferKind {
    /** RewardDev */
    RewardDev = "reward_dev",
    /** RewardBlock */
    RewardBlock = "reward_block"
}
/**
 * Defines values for TransferKind. \
 * {@link KnownTransferKind} can be used interchangeably with TransferKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **reward_dev** \
 * **reward_block**
 */
export type TransferKind = string;
/** Known values of {@link InternalTransferEventKind} that the service accepts. */
export declare enum KnownInternalTransferEventKind {
    /** AccountsExtraLima */
    AccountsExtraLima = "accounts_extra_lima",
    /** AccountsFortuna */
    AccountsFortuna = "accounts_fortuna",
    /** AccountsGenesis */
    AccountsGenesis = "accounts_genesis",
    /** AccountsLima */
    AccountsLima = "accounts_lima",
    /** AccountsMinerva */
    AccountsMinerva = "accounts_minerva",
    /** ContractsLima */
    ContractsLima = "contracts_lima",
    /** RewardDev */
    RewardDev = "reward_dev",
    /** RewardBlock */
    RewardBlock = "reward_block",
    /** FeeRefundOracle */
    FeeRefundOracle = "fee_refund_oracle",
    /** FeeLockName */
    FeeLockName = "fee_lock_name",
    /** FeeRefundName */
    FeeRefundName = "fee_refund_name",
    /** FeeSpendName */
    FeeSpendName = "fee_spend_name",
    /** RewardOracle */
    RewardOracle = "reward_oracle"
}
/**
 * Defines values for InternalTransferEventKind. \
 * {@link KnownInternalTransferEventKind} can be used interchangeably with InternalTransferEventKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **accounts_extra_lima** \
 * **accounts_fortuna** \
 * **accounts_genesis** \
 * **accounts_lima** \
 * **accounts_minerva** \
 * **contracts_lima** \
 * **reward_dev** \
 * **reward_block** \
 * **fee_refund_oracle** \
 * **fee_lock_name** \
 * **fee_refund_name** \
 * **fee_spend_name** \
 * **reward_oracle**
 */
export type InternalTransferEventKind = string;
/** Known values of {@link Enum51} that the service accepts. */
export declare enum KnownEnum51 {
    /** Forward */
    Forward = "forward",
    /** Backward */
    Backward = "backward"
}
/**
 * Defines values for Enum51. \
 * {@link KnownEnum51} can be used interchangeably with Enum51,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **forward** \
 * **backward**
 */
export type Enum51 = string;
/** Optional parameters. */
export interface GetAex141OwnedTokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum0;
    /** Collection contract pubkey Contract address */
    contract?: `ct_${string}`;
}
/** Contains response data for the getAex141OwnedTokens operation. */
export type GetAex141OwnedTokensResponse = MiddlewarePage<Aex141TokenResponse>;
/** Optional parameters. */
export interface GetAex9AccountBalancesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex9AccountBalances operation. */
export type GetAex9AccountBalancesResponse = MiddlewarePage<Aex9BalanceResponse>;
/** Optional parameters. */
export interface GetAccountDexSwapsOptionalParams extends coreClient.OperationOptions {
    /** Sorts results in forwards or backwards direction */
    direction?: Enum1;
}
/** Contains response data for the getAccountDexSwaps operation. */
export type GetAccountDexSwapsResponse = MiddlewarePage<DexSwap>;
/** Optional parameters. */
export interface GetAccountActivitiesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Indicate to filter only activities initiated by the account */
    ownedOnly?: boolean;
    /**
     * Filter by activity type. Supported values:
     *  * `transactions` - Transactions containing the account in any of the transaction fields
     *  * `aexn` - AExN (aex9 and aex141) activities
     *  * `aex9` - AEx9 activities
     *  * `aex141` - AEx141 activities
     *  * `contract` - Internal and external contract calls
     *  * `transfers` - Internal (both gen-based and tx-based) transfers
     *  * `claims` - Name claims related to the name hash
     *  * `swaps` - Dex swaps related to the name hash
     *
     */
    type?: Enum3;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum4;
}
/** Contains response data for the getAccountActivities operation. */
export type GetAccountActivitiesResponse = MiddlewarePage<Activity>;
/** Optional parameters. */
export interface GetAccountPointeesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAccountPointees operation. */
export type GetAccountPointeesResponse = MiddlewarePage<Pointee>;
/** Optional parameters. */
export interface GetAccountTransactionsCountOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAccountTransactionsCount operation. */
export type GetAccountTransactionsCountResponse = PathsLv15NfV3TransactionsCountIdGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetSortedAex141ContractsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum7;
    /** meta info field used on sorting */
    by?: Enum8;
    /** Sorts by name or symbol prefix, this is decided by the 'by' field. If it's name, it will sort by name prefix, if it's symbol, it will sort by symbol prefix. */
    prefix?: string;
    /** Gets AEX141 contracts with exact name or symbol, this is decided by the 'by' field. If it's name, it will get contracts with exact name, if it's symbol, it will get contracts with exact symbol. */
    exact?: string;
}
/** Contains response data for the getSortedAex141Contracts operation. */
export type GetSortedAex141ContractsResponse = MiddlewarePage<Aex141Response>;
/** Optional parameters. */
export interface GetAex141ContractTemplatesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum9;
}
/** Contains response data for the getAex141ContractTemplates operation. */
export type GetAex141ContractTemplatesResponse = MiddlewarePage<Aex141TemplatesResponse>;
/** Optional parameters. */
export interface GetAex141TemplateTokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum10;
}
/** Contains response data for the getAex141TemplateTokens operation. */
export type GetAex141TemplateTokensResponse = MiddlewarePage<Aex141TemplateTokensResponse>;
/** Optional parameters. */
export interface GetAex141ContractTokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum11;
}
/** Contains response data for the getAex141ContractTokens operation. */
export type GetAex141ContractTokensResponse = MiddlewarePage<Aex141TokenResponse>;
/** Optional parameters. */
export interface GetAex141TokenOwnerOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex141TokenOwner operation. */
export type GetAex141TokenOwnerResponse = Paths1Fbvaw8V3Aex141ContractidTokensTokenidGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetAex141ContractTransfersOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum12;
    /** From account Account address */
    from?: `ak_${string}`;
    /** To account Account address */
    to?: `ak_${string}`;
}
/** Contains response data for the getAex141ContractTransfers operation. */
export type GetAex141ContractTransfersResponse = MiddlewarePage<Aex141TransferEvent>;
/** Optional parameters. */
export interface GetAex141ByContractOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex141ByContract operation. */
export type GetAex141ByContractResponse = Aex141Response;
/** Optional parameters. */
export interface GetSortedAex9TokensOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts by name or symbol prefix, this is decided by the 'by' field. If it's name, it will sort by name prefix, if it's symbol, it will sort by symbol prefix. */
    prefix?: string;
    /** Gets AEX9 tokens with exact name or symbol, this is decided by the 'by' field. If it's name, it will get tokens with exact name, if it's symbol, it will get tokens with exact symbol. */
    exact?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum13;
    /** meta info field used on sorting */
    by?: Enum14;
}
/** Contains response data for the getSortedAex9Tokens operation. */
export type GetSortedAex9TokensResponse = MiddlewarePage<Aex9Response>;
/** Optional parameters. */
export interface GetAex9TokensCountOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex9TokensCount operation. */
export type GetAex9TokensCountResponse = Paths19IxhsmV3Aex9CountGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetAex9ContractBalancesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum15;
    /** Order by */
    by?: string;
    /** Block hash Micro block hash */
    blockHash?: `mh_${string}`;
}
/** Contains response data for the getAex9ContractBalances operation. */
export type GetAex9ContractBalancesResponse = MiddlewarePage<Aex9ContractBalanceResponse>;
/** Optional parameters. */
export interface GetAex9ContractAccountBalanceOptionalParams extends coreClient.OperationOptions {
    /** Block hash Micro block hash */
    hash?: `mh_${string}`;
}
/** Contains response data for the getAex9ContractAccountBalance operation. */
export type GetAex9ContractAccountBalanceResponse = PathsKr825V3Aex9ContractidBalancesAccountidGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetAex9ContractAccountBalanceHistoryOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum16;
}
/** Contains response data for the getAex9ContractAccountBalanceHistory operation. */
export type GetAex9ContractAccountBalanceHistoryResponse = MiddlewarePage<Get200ApplicationJsonAllOfPropertiesItemsItem>;
/** Optional parameters. */
export interface GetAex9ByContractOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getAex9ByContract operation. */
export type GetAex9ByContractResponse = Aex9Response;
/** Optional parameters. */
export interface GetChannelsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum17;
    /** Exclusively filter by active/inactive channels. */
    state?: Enum18;
}
/** Contains response data for the getChannels operation. */
export type GetChannelsResponse = MiddlewarePage<Channel>;
/** Optional parameters. */
export interface GetChannelOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getChannel operation. */
export type GetChannelResponse = Channel;
/** Optional parameters. */
export interface GetContractCallsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum19;
}
/** Contains response data for the getContractCalls operation. */
export type GetContractCallsResponse = MiddlewarePage<ContractCall>;
/** Optional parameters. */
export interface GetContractLogsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Contract that emitted the logs Contract address */
    contractId?: `ct_${string}`;
    /** Name of the event */
    event?: string;
    /** Prefix of the contract called function */
    function?: string;
    /** Prefix of the contract called function */
    functionPrefix?: string;
    /** Data prefix from the contract call */
    data?: string;
    /** Indicates to format args when event is AEX-N */
    aexnArgs?: boolean;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum20;
}
/** Contains response data for the getContractLogs operation. */
export type GetContractLogsResponse = MiddlewarePage<ContractLog>;
/** Optional parameters. */
export interface GetContractOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getContract operation. */
export type GetContractResponse = Contract;
/** Optional parameters. */
export interface GetDexSwapsOptionalParams extends coreClient.OperationOptions {
    /** Sorts results in forwards or backwards direction */
    direction?: Enum21;
}
/** Contains response data for the getDexSwaps operation. */
export type GetDexSwapsResponse = MiddlewarePage<DexSwap>;
/** Optional parameters. */
export interface GetDexSwapsByContractIdOptionalParams extends coreClient.OperationOptions {
    /** Sorts results in forwards or backwards direction */
    direction?: Enum22;
}
/** Contains response data for the getDexSwapsByContractId operation. */
export type GetDexSwapsByContractIdResponse = MiddlewarePage<DexSwap>;
/** Optional parameters. */
export interface GetKeyBlocksOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum23;
}
/** Contains response data for the getKeyBlocks operation. */
export type GetKeyBlocksResponse = MiddlewarePage<KeyBlock>;
/** Optional parameters. */
export interface GetKeyBlockOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getKeyBlock operation. */
export type GetKeyBlockResponse = KeyBlock;
/** Optional parameters. */
export interface GetKeyBlockMicroBlocksOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum24;
}
/** Contains response data for the getKeyBlockMicroBlocks operation. */
export type GetKeyBlockMicroBlocksResponse = MiddlewarePage<MicroBlock>;
/** Optional parameters. */
export interface GetMicroBlockOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getMicroBlock operation. */
export type GetMicroBlockResponse = MicroBlock;
/** Optional parameters. */
export interface GetMicroBlockTransactionsOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getMicroBlockTransactions operation. */
export type GetMicroBlockTransactionsResponse = MiddlewarePage<Transaction>;
/** Optional parameters. */
export interface GetNamesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Name prefix filter (case insensitive). Requires by=name parameter */
    prefix?: string;
    /** Sorting by deactivation, activation or name */
    by?: string;
    /** Account that owns the name Account address */
    ownedBy?: `ak_${string}`;
    /** Activation state of the name (active or inactive) */
    state?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum25;
}
/** Contains response data for the getNames operation. */
export type GetNamesResponse = MiddlewarePage<Name>;
/** Optional parameters. */
export interface GetNamesAuctionsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum26;
}
/** Contains response data for the getNamesAuctions operation. */
export type GetNamesAuctionsResponse = MiddlewarePage<Auction>;
/** Optional parameters. */
export interface GetNameAuctionOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum27;
}
/** Contains response data for the getNameAuction operation. */
export type GetNameAuctionResponse = Auction;
/** Optional parameters. */
export interface GetNameAuctionClaimsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum28;
}
/** Contains response data for the getNameAuctionClaims operation. */
export type GetNameAuctionClaimsResponse = PathsCrb9BgV3NamesAuctionsIdClaimsGetResponses200ContentApplicationJsonSchema;
/** Optional parameters. */
export interface GetNamesCountOptionalParams extends coreClient.OperationOptions {
    /** Account that owns the name Account address */
    ownedBy?: `ak_${string}`;
}
/** Contains response data for the getNamesCount operation. */
export type GetNamesCountResponse = {
    /** The parsed response body. */
    body: number;
};
/** Optional parameters. */
export interface GetNameOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getName operation. */
export type GetNameResponse = Name;
/** Optional parameters. */
export interface GetNameClaimsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum29;
}
/** Contains response data for the getNameClaims operation. */
export type GetNameClaimsResponse = MiddlewarePage<NameClaim>;
/** Optional parameters. */
export interface GetNameTransfersOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum30;
}
/** Contains response data for the getNameTransfers operation. */
export type GetNameTransfersResponse = MiddlewarePage<NameTransfer>;
/** Optional parameters. */
export interface GetNameUpdatesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum31;
}
/** Contains response data for the getNameUpdates operation. */
export type GetNameUpdatesResponse = MiddlewarePage<NameUpdate>;
/** Optional parameters. */
export interface GetOraclesOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** oracle state (active or inactive) */
    state?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum32;
}
/** Contains response data for the getOracles operation. */
export type GetOraclesResponse = MiddlewarePage<Oracle>;
/** Optional parameters. */
export interface GetOracleOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracle operation. */
export type GetOracleResponse = Oracle;
/** Optional parameters. */
export interface GetOracleExtendsOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracleExtends operation. */
export type GetOracleExtendsResponse = MiddlewarePage<OracleExtend>;
/** Optional parameters. */
export interface GetOracleQueriesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracleQueries operation. */
export type GetOracleQueriesResponse = MiddlewarePage<OracleQuery>;
/** Optional parameters. */
export interface GetOracleResponsesOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getOracleResponses operation. */
export type GetOracleResponsesResponse = MiddlewarePage<OracleResponse>;
/** Optional parameters. */
export interface GetStatsOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getStats operation. */
export type GetStatsResponse = Stats;
/** Optional parameters. */
export interface GetBlocksStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The interval in which to return the stats. */
    intervalBy?: Enum35;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The type of block. */
    type?: Enum36;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum37;
}
/** Contains response data for the getBlocksStats operation. */
export type GetBlocksStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetDeltaStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum38;
}
/** Contains response data for the getDeltaStats operation. */
export type GetDeltaStatsResponse = MiddlewarePage<DeltaStat>;
/** Optional parameters. */
export interface GetMinerStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum39;
}
/** Contains response data for the getMinerStats operation. */
export type GetMinerStatsResponse = MiddlewarePage<Miner>;
/** Optional parameters. */
export interface GetNamesStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum40;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum41;
}
/** Contains response data for the getNamesStats operation. */
export type GetNamesStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetTotalStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum42;
}
/** Contains response data for the getTotalStats operation. */
export type GetTotalStatsResponse = MiddlewarePage<TotalStat>;
/** Optional parameters. */
export interface GetTransactionsStatsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The minimum start date in YYYY-MM-DD format. */
    minStartDate?: string;
    /** The maximum start date in YYYY-MM-DD format. */
    maxStartDate?: string;
    /** The interval in which to return the stats. */
    intervalBy?: Enum43;
    /** The type of the transactions */
    txType?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum44;
}
/** Contains response data for the getTransactionsStats operation. */
export type GetTransactionsStatsResponse = MiddlewarePage<Stat>;
/** Optional parameters. */
export interface GetStatusOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getStatus operation. */
export type GetStatusResponse = Status;
/** Optional parameters. */
export interface GetTransactionsOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** The contract ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Contract address */
    contract?: `ct_${string}`;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** The transaction type. The query allows providing of multiple type parameters. [More info](https://github.com/aeternity/ae_mdw#types) */
    type?: Get0ItemsItem[];
    /** The type group. The query allows providing of multiple type group parameters. [More info](https://github.com/aeternity/ae_mdw#types) */
    typeGroup?: Get1ItemsItem[];
    /** The account ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Account address */
    account?: `ak_${string}`;
    /** The channel ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Channel ID */
    channel?: `ch_${string}`;
    /** The oracle ID. [More info](https://github.com/aeternity/ae_mdw#generic-ids) Oracle address */
    oracle?: `ok_${string}`;
    /** The sender ID Account address */
    senderId?: `ak_${string}`;
    /** The recipient ID Account address */
    recipientId?: `ak_${string}`;
    /** Entrypoint of a contract call */
    entrypoint?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum47;
}
/** Contains response data for the getTransactions operation. */
export type GetTransactionsResponse = MiddlewarePage<Transaction>;
/** Optional parameters. */
export interface GetTransactionsCountOptionalParams extends coreClient.OperationOptions {
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Type of a transaction */
    txType?: string;
    /** The ID of the address/name/oracle/etc Account address */
    id?: `ak_${string}`;
}
/** Contains response data for the getTransactionsCount operation. */
export type GetTransactionsCountResponse = {
    /** The parsed response body. */
    body: number;
};
/** Optional parameters. */
export interface GetTransactionOptionalParams extends coreClient.OperationOptions {
}
/** Contains response data for the getTransaction operation. */
export type GetTransactionResponse = Transaction;
/** Optional parameters. */
export interface GetTransfersOptionalParams extends coreClient.OperationOptions {
    /** Limit paginated resources (max 100) */
    limit?: number;
    /** Scopes results in a txi or generation range */
    scope?: string;
    /** Sorts results in forwards or backwards direction */
    direction?: Enum48;
}
/** Contains response data for the getTransfers operation. */
export type GetTransfersResponse = MiddlewarePage<Transfer>;
/** Optional parameters. */
export interface MiddlewareOptionalParams extends coreClient.ServiceClientOptions {
    /** Overrides client endpoint. */
    endpoint?: string;
}
