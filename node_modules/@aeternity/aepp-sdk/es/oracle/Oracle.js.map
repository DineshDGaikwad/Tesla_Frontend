{"version":3,"file":"Oracle.js","names":["buildTxAsync","Tag","LogicError","UnexpectedTsError","decode","encode","Encoding","_getPollInterval","sendTransaction","OracleBase","decodeQuery","_handleQueriesPromise","WeakMap","Oracle","constructor","account","options","address","OracleAddress","_classPrivateFieldInitSpec","register","queryFormat","responseFormat","opt","oracleRegisterTx","_isInternalBuild","tag","OracleRegisterTx","accountId","onAccount","extendTtl","oracleExtendTx","OracleExtendTx","oracleId","pollQueries","onQuery","knownQueryIds","Set","isChecking","checkNewQueries","_await$opt$onNode$get","queries","onNode","getOracleQueriesByPubkey","oracleQueries","filtered","filter","id","has","map","query","includeResponded","decodedResponse","forEach","add","Promise","all","idPromise","_opt$interval","interval","setInterval","clearInterval","respondToQuery","queryId","response","oracleRespondTx","OracleResponseTx","handleQueries","getResponse","_classPrivateFieldGet","queuePromise","resolve","handler","q","respondPromise","then","_classPrivateFieldSet","stopPoll","promise","undefined"],"sources":["../../src/oracle/Oracle.ts"],"sourcesContent":["import { buildTxAsync, BuildTxOptions } from '../tx/builder/index.js';\nimport { Tag } from '../tx/builder/constants.js';\nimport { LogicError, UnexpectedTsError } from '../utils/errors.js';\nimport { decode, encode, Encoded, Encoding } from '../utils/encoder.js';\nimport { _getPollInterval } from '../chain.js';\nimport { sendTransaction, SendTransactionOptions } from '../send-transaction.js';\nimport Node from '../Node.js';\nimport AccountBase from '../account/Base.js';\nimport OracleBase, { OracleQuery, decodeQuery } from './OracleBase.js';\n\ninterface OracleRegisterOptions\n  extends BuildTxOptions<Tag.OracleRegisterTx, 'accountId' | 'queryFormat' | 'responseFormat'>,\n    Omit<SendTransactionOptions, 'onNode' | 'onAccount'> {}\n\ninterface OracleExtendTtlOptions\n  extends BuildTxOptions<Tag.OracleExtendTx, 'callerId' | 'oracleId'>,\n    Omit<SendTransactionOptions, 'onNode' | 'onAccount'> {}\n\ninterface OracleRespondToQueryOptions\n  extends BuildTxOptions<Tag.OracleResponseTx, 'callerId' | 'oracleId' | 'queryId' | 'response'>,\n    Omit<SendTransactionOptions, 'onNode' | 'onAccount'> {}\n\n/**\n * @category oracle\n */\nexport default class Oracle extends OracleBase {\n  /**\n   * @param account - Account to use as oracle\n   * @param options - Options object\n   */\n  constructor(\n    public readonly account: AccountBase,\n    public override options: OracleRegisterOptions &\n      OracleExtendTtlOptions &\n      Parameters<Oracle['handleQueries']>[1] & { onNode: Node },\n  ) {\n    super(encode(decode(account.address), Encoding.OracleAddress), options);\n  }\n\n  // TODO: support abiVersion other than 0\n  /**\n   * Register oracle\n   * @param queryFormat - Format of query\n   * @param responseFormat - Format of query response\n   * @param options - Options object\n   */\n  async register(\n    queryFormat: string,\n    responseFormat: string,\n    options: OracleRegisterOptions = {},\n  ): ReturnType<typeof sendTransaction> {\n    const opt = { ...this.options, ...options };\n    const oracleRegisterTx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.OracleRegisterTx,\n      accountId: this.account.address,\n      queryFormat,\n      responseFormat,\n    });\n    return sendTransaction(oracleRegisterTx, { ...opt, onAccount: this.account });\n  }\n\n  /**\n   * Extend oracle ttl\n   * @param options - Options object\n   */\n  async extendTtl(options: OracleExtendTtlOptions = {}): ReturnType<typeof sendTransaction> {\n    const opt = { ...this.options, ...options };\n    const oracleExtendTx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.OracleExtendTx,\n      oracleId: this.address,\n    });\n    return sendTransaction(oracleExtendTx, { ...opt, onAccount: this.account });\n  }\n\n  /**\n   * Poll for oracle queries\n   * @param onQuery - OnQuery callback\n   * @param options - Options object\n   * @param options.interval - Poll interval (default: 5000)\n   * @returns Callback to stop polling function\n   */\n  pollQueries(\n    onQuery: (query: OracleQuery) => void,\n    options: { interval?: number; includeResponded?: boolean } & Partial<\n      Parameters<typeof _getPollInterval>[1]\n    > = {},\n  ): () => void {\n    const opt = { ...this.options, ...options };\n    const knownQueryIds = new Set();\n\n    let isChecking = false;\n    const checkNewQueries = async (): Promise<void> => {\n      if (isChecking) return;\n      isChecking = true;\n      const queries = (await opt.onNode.getOracleQueriesByPubkey(this.address)).oracleQueries ?? [];\n      const filtered = queries\n        .filter(({ id }) => !knownQueryIds.has(id))\n        .map((query) => decodeQuery(query))\n        .filter((query) => options.includeResponded === true || query.decodedResponse === '');\n      filtered.forEach((query) => knownQueryIds.add(query.id));\n      isChecking = false;\n      await Promise.all(filtered.map((query) => onQuery(query)));\n    };\n\n    checkNewQueries();\n    const idPromise = (async () => {\n      const interval = opt.interval ?? (await _getPollInterval('micro-block', opt));\n      return setInterval(async () => checkNewQueries(), interval);\n    })();\n\n    return async () => {\n      const id = await idPromise;\n      clearInterval(id);\n    };\n  }\n\n  /**\n   * Respond to a query\n   * @param queryId - Oracle query id\n   * @param response - The response to query\n   * @param options - Options object\n   */\n  async respondToQuery(\n    queryId: Encoded.OracleQueryId,\n    response: string,\n    options: OracleRespondToQueryOptions = {},\n  ): ReturnType<typeof sendTransaction> {\n    const opt = { ...this.options, ...options };\n    const oracleRespondTx = await buildTxAsync({\n      _isInternalBuild: true,\n      ...opt,\n      tag: Tag.OracleResponseTx,\n      oracleId: this.address,\n      queryId,\n      response,\n    });\n    return sendTransaction(oracleRespondTx, { ...opt, onAccount: this.account });\n  }\n\n  #handleQueriesPromise?: Promise<void>;\n\n  /**\n   * Respond to queries to oracle based on callback value\n   * @param getResponse - Callback to respond on query\n   * @param options - Options object\n   * @param options.interval - Poll interval (default: 5000)\n   * @returns Callback to stop polling function\n   */\n  handleQueries(\n    getResponse: (q: OracleQuery) => Promise<string> | string,\n    options: Parameters<Oracle['pollQueries']>[1] & OracleRespondToQueryOptions = {},\n  ): () => void {\n    if (this.#handleQueriesPromise != null) {\n      throw new LogicError(\n        'Another query handler already running, it needs to be stopped to run a new one',\n      );\n    }\n    const opt = { ...this.options, ...options };\n\n    let queuePromise = Promise.resolve();\n    const handler = async (q: OracleQuery): Promise<void> => {\n      const response = await getResponse(q);\n      const respondPromise = queuePromise.then(async () =>\n        this.respondToQuery(q.id, response, opt),\n      );\n      queuePromise = respondPromise.then(\n        () => {},\n        () => {},\n      );\n      await respondPromise;\n    };\n\n    this.#handleQueriesPromise = Promise.resolve();\n    const stopPoll = this.pollQueries(async (query: OracleQuery) => {\n      const promise = handler(query);\n      if (this.#handleQueriesPromise == null) throw new UnexpectedTsError();\n      this.#handleQueriesPromise = this.#handleQueriesPromise\n        .then(async () => promise)\n        .then(\n          () => {},\n          () => {},\n        );\n      return promise;\n    }, opt);\n\n    return async () => {\n      stopPoll();\n      await this.#handleQueriesPromise;\n      this.#handleQueriesPromise = undefined;\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}