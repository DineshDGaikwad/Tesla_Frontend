import { Encoded } from '../utils/encoder.js';
import Node from '../Node.js';
type OracleQueryNode = Awaited<ReturnType<Node['getOracleQueriesByPubkey']>>['oracleQueries'][number];
export interface OracleQuery extends OracleQueryNode {
    id: Encoded.OracleQueryId;
    decodedQuery: string;
    decodedResponse: string;
}
export declare function decodeQuery(queryEntry: OracleQueryNode): OracleQuery;
/**
 * This class is needed because `getOracleQuery` would return different values depending on the
 * oracle type.
 */
export default class OracleBase {
    readonly address: Encoded.OracleAddress;
    options: {
        onNode: Node;
    };
    /**
     * @param address - Oracle public key
     */
    constructor(address: Encoded.OracleAddress, options: {
        onNode: Node;
    });
    /**
     * Get oracle entry from the node
     * @param options - Options object
     */
    getState(options?: {
        onNode?: Node;
    }): ReturnType<Node['getOracleByPubkey']>;
    /**
     * Get oracle query entry from the node
     * @param queryId - Oracle query ID
     * @param options - Options object
     */
    getQuery(queryId: Encoded.OracleQueryId, options?: {
        onNode?: Node;
    }): Promise<OracleQuery>;
}
export {};
